/*
 * WhatsAPI Go
 *
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// StructsListMessagePayload
    /// </summary>
    [DataContract]
    public partial class StructsListMessagePayload :  IEquatable<StructsListMessagePayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructsListMessagePayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StructsListMessagePayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StructsListMessagePayload" /> class.
        /// </summary>
        /// <param name="buttonText">buttonText.</param>
        /// <param name="description">description.</param>
        /// <param name="multiSelect">multiSelect.</param>
        /// <param name="sections">sections (required).</param>
        /// <param name="text">text.</param>
        /// <param name="title">title.</param>
        /// <param name="to">to (required).</param>
        public StructsListMessagePayload(string buttonText = default(string), string description = default(string), bool multiSelect = default(bool), List<StructsListSection> sections = default(List<StructsListSection>), string text = default(string), string title = default(string), string to = default(string))
        {
            // to ensure "sections" is required (not null)
            if (sections == null)
            {
                throw new InvalidDataException("sections is a required property for StructsListMessagePayload and cannot be null");
            }
            else
            {
                this.Sections = sections;
            }

            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for StructsListMessagePayload and cannot be null");
            }
            else
            {
                this.To = to;
            }

            this.ButtonText = buttonText;
            this.Description = description;
            this.MultiSelect = multiSelect;
            this.Text = text;
            this.Title = title;
        }

        /// <summary>
        /// Gets or Sets ButtonText
        /// </summary>
        [DataMember(Name="button_text", EmitDefaultValue=false)]
        public string ButtonText { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets MultiSelect
        /// </summary>
        [DataMember(Name="multi_select", EmitDefaultValue=false)]
        public bool MultiSelect { get; set; }

        /// <summary>
        /// Gets or Sets Sections
        /// </summary>
        [DataMember(Name="sections", EmitDefaultValue=true)]
        public List<StructsListSection> Sections { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="to", EmitDefaultValue=true)]
        public string To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StructsListMessagePayload {\n");
            sb.Append("  ButtonText: ").Append(ButtonText).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MultiSelect: ").Append(MultiSelect).Append("\n");
            sb.Append("  Sections: ").Append(Sections).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructsListMessagePayload);
        }

        /// <summary>
        /// Returns true if StructsListMessagePayload instances are equal
        /// </summary>
        /// <param name="input">Instance of StructsListMessagePayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructsListMessagePayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ButtonText == input.ButtonText ||
                    (this.ButtonText != null &&
                    this.ButtonText.Equals(input.ButtonText))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.MultiSelect == input.MultiSelect ||
                    (this.MultiSelect != null &&
                    this.MultiSelect.Equals(input.MultiSelect))
                ) && 
                (
                    this.Sections == input.Sections ||
                    this.Sections != null &&
                    input.Sections != null &&
                    this.Sections.SequenceEqual(input.Sections)
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ButtonText != null)
                    hashCode = hashCode * 59 + this.ButtonText.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.MultiSelect != null)
                    hashCode = hashCode * 59 + this.MultiSelect.GetHashCode();
                if (this.Sections != null)
                    hashCode = hashCode * 59 + this.Sections.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
