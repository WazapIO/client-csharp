/*
 * WhatsAPI Go
 *
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get admin groupss.
        /// </summary>
        /// <remarks>
        /// Returns list of all groups in which you are admin.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeyGroupsAdminGet (string instanceKey);

        /// <summary>
        /// Get admin groupss.
        /// </summary>
        /// <remarks>
        /// Returns list of all groups in which you are admin.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsAdminGetWithHttpInfo (string instanceKey);
        /// <summary>
        /// Create group.
        /// </summary>
        /// <remarks>
        /// Creates a group with the participant data. The creator is automatically added to the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Group create payload</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeyGroupsCreatePost (string instanceKey, StructsGroupCreatePayload data);

        /// <summary>
        /// Create group.
        /// </summary>
        /// <remarks>
        /// Creates a group with the participant data. The creator is automatically added to the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Group create payload</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsCreatePostWithHttpInfo (string instanceKey, StructsGroupCreatePayload data);
        /// <summary>
        /// Get all groups.
        /// </summary>
        /// <remarks>
        /// Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="includeParticipants">Include participants data (optional, default to true)</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeyGroupsGet (string instanceKey, string includeParticipants = default(string));

        /// <summary>
        /// Get all groups.
        /// </summary>
        /// <remarks>
        /// Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="includeParticipants">Include participants data (optional, default to true)</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGetWithHttpInfo (string instanceKey, string includeParticipants = default(string));
        /// <summary>
        /// Set group announce.
        /// </summary>
        /// <remarks>
        /// Set if non-admins are allowed to send messages in groups
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="announce">Announce status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeyGroupsGroupIdAnnouncePut (string instanceKey, bool announce, string groupId);

        /// <summary>
        /// Set group announce.
        /// </summary>
        /// <remarks>
        /// Set if non-admins are allowed to send messages in groups
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="announce">Announce status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdAnnouncePutWithHttpInfo (string instanceKey, bool announce, string groupId);
        /// <summary>
        /// Leaves the group.
        /// </summary>
        /// <remarks>
        /// Leaves the specified group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeyGroupsGroupIdDelete (string instanceKey, string groupId);

        /// <summary>
        /// Leaves the group.
        /// </summary>
        /// <remarks>
        /// Leaves the specified group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdDeleteWithHttpInfo (string instanceKey, string groupId);
        /// <summary>
        /// Set group description.
        /// </summary>
        /// <remarks>
        /// Changes the group description
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group description data</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeyGroupsGroupIdDescriptionPut (string instanceKey, string groupId, StructsGroupUpdateDescriptionPayload data);

        /// <summary>
        /// Set group description.
        /// </summary>
        /// <remarks>
        /// Changes the group description
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group description data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdDescriptionPutWithHttpInfo (string instanceKey, string groupId, StructsGroupUpdateDescriptionPayload data);
        /// <summary>
        /// Get group.
        /// </summary>
        /// <remarks>
        /// Fetches the group data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeyGroupsGroupIdGet (string instanceKey, string groupId);

        /// <summary>
        /// Get group.
        /// </summary>
        /// <remarks>
        /// Fetches the group data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdGetWithHttpInfo (string instanceKey, string groupId);
        /// <summary>
        /// Get group invite code.
        /// </summary>
        /// <remarks>
        /// Gets the invite code of the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeyGroupsGroupIdInviteCodeGet (string instanceKey, string groupId);

        /// <summary>
        /// Get group invite code.
        /// </summary>
        /// <remarks>
        /// Gets the invite code of the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdInviteCodeGetWithHttpInfo (string instanceKey, string groupId);
        /// <summary>
        /// Set group locked.
        /// </summary>
        /// <remarks>
        /// Set if non-admins are allowed to change the group dp and other stuff
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="locked">Locked status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeyGroupsGroupIdLockPut (string instanceKey, bool locked, string groupId);

        /// <summary>
        /// Set group locked.
        /// </summary>
        /// <remarks>
        /// Set if non-admins are allowed to change the group dp and other stuff
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="locked">Locked status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdLockPutWithHttpInfo (string instanceKey, bool locked, string groupId);
        /// <summary>
        /// Set group name.
        /// </summary>
        /// <remarks>
        /// Changes the group name. The max limit is 22 chars
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group name data</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeyGroupsGroupIdNamePut (string instanceKey, string groupId, StructsGroupUpdateNamePayload data);

        /// <summary>
        /// Set group name.
        /// </summary>
        /// <remarks>
        /// Changes the group name. The max limit is 22 chars
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group name data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdNamePutWithHttpInfo (string instanceKey, string groupId, StructsGroupUpdateNamePayload data);
        /// <summary>
        /// Add participant.
        /// </summary>
        /// <remarks>
        /// Handles adding participants to a group. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeyGroupsGroupIdParticipantsAddPost (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data);

        /// <summary>
        /// Add participant.
        /// </summary>
        /// <remarks>
        /// Handles adding participants to a group. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdParticipantsAddPostWithHttpInfo (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data);
        /// <summary>
        /// Demote participant.
        /// </summary>
        /// <remarks>
        /// Demotes admins in groups. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeyGroupsGroupIdParticipantsDemotePut (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data);

        /// <summary>
        /// Demote participant.
        /// </summary>
        /// <remarks>
        /// Demotes admins in groups. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdParticipantsDemotePutWithHttpInfo (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data);
        /// <summary>
        /// Promote participant.
        /// </summary>
        /// <remarks>
        /// Promotes participants to admin. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeyGroupsGroupIdParticipantsPromotePut (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data);

        /// <summary>
        /// Promote participant.
        /// </summary>
        /// <remarks>
        /// Promotes participants to admin. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdParticipantsPromotePutWithHttpInfo (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data);
        /// <summary>
        /// Remove participant.
        /// </summary>
        /// <remarks>
        /// Handles removing participants from a group. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data);

        /// <summary>
        /// Remove participant.
        /// </summary>
        /// <remarks>
        /// Handles removing participants from a group. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteWithHttpInfo (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data);
        /// <summary>
        /// Set group picture.
        /// </summary>
        /// <remarks>
        /// Changes the group profile picture. Currently it only seems to accept JPEG images only
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="instancesInstanceKeyGroupsGroupIdProfilePicPutRequest"></param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeyGroupsGroupIdProfilePicPut (string instanceKey, string groupId, InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest instancesInstanceKeyGroupsGroupIdProfilePicPutRequest);

        /// <summary>
        /// Set group picture.
        /// </summary>
        /// <remarks>
        /// Changes the group profile picture. Currently it only seems to accept JPEG images only
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="instancesInstanceKeyGroupsGroupIdProfilePicPutRequest"></param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdProfilePicPutWithHttpInfo (string instanceKey, string groupId, InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest instancesInstanceKeyGroupsGroupIdProfilePicPutRequest);
        /// <summary>
        /// Get group from invite link.
        /// </summary>
        /// <remarks>
        /// Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteLink">The invite link to check</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeyGroupsInviteInfoGet (string instanceKey, string inviteLink);

        /// <summary>
        /// Get group from invite link.
        /// </summary>
        /// <remarks>
        /// Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteLink">The invite link to check</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsInviteInfoGetWithHttpInfo (string instanceKey, string inviteLink);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get admin groupss.
        /// </summary>
        /// <remarks>
        /// Returns list of all groups in which you are admin.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsAdminGetAsync (string instanceKey, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get admin groupss.
        /// </summary>
        /// <remarks>
        /// Returns list of all groups in which you are admin.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsAdminGetWithHttpInfoAsync (string instanceKey, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create group.
        /// </summary>
        /// <remarks>
        /// Creates a group with the participant data. The creator is automatically added to the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Group create payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsCreatePostAsync (string instanceKey, StructsGroupCreatePayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create group.
        /// </summary>
        /// <remarks>
        /// Creates a group with the participant data. The creator is automatically added to the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Group create payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsCreatePostWithHttpInfoAsync (string instanceKey, StructsGroupCreatePayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get all groups.
        /// </summary>
        /// <remarks>
        /// Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="includeParticipants">Include participants data (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGetAsync (string instanceKey, string includeParticipants = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all groups.
        /// </summary>
        /// <remarks>
        /// Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="includeParticipants">Include participants data (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGetWithHttpInfoAsync (string instanceKey, string includeParticipants = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set group announce.
        /// </summary>
        /// <remarks>
        /// Set if non-admins are allowed to send messages in groups
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="announce">Announce status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdAnnouncePutAsync (string instanceKey, bool announce, string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set group announce.
        /// </summary>
        /// <remarks>
        /// Set if non-admins are allowed to send messages in groups
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="announce">Announce status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdAnnouncePutWithHttpInfoAsync (string instanceKey, bool announce, string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Leaves the group.
        /// </summary>
        /// <remarks>
        /// Leaves the specified group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdDeleteAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Leaves the group.
        /// </summary>
        /// <remarks>
        /// Leaves the specified group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdDeleteWithHttpInfoAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set group description.
        /// </summary>
        /// <remarks>
        /// Changes the group description
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group description data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdDescriptionPutAsync (string instanceKey, string groupId, StructsGroupUpdateDescriptionPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set group description.
        /// </summary>
        /// <remarks>
        /// Changes the group description
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group description data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdDescriptionPutWithHttpInfoAsync (string instanceKey, string groupId, StructsGroupUpdateDescriptionPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get group.
        /// </summary>
        /// <remarks>
        /// Fetches the group data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdGetAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get group.
        /// </summary>
        /// <remarks>
        /// Fetches the group data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdGetWithHttpInfoAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get group invite code.
        /// </summary>
        /// <remarks>
        /// Gets the invite code of the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdInviteCodeGetAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get group invite code.
        /// </summary>
        /// <remarks>
        /// Gets the invite code of the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdInviteCodeGetWithHttpInfoAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set group locked.
        /// </summary>
        /// <remarks>
        /// Set if non-admins are allowed to change the group dp and other stuff
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="locked">Locked status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdLockPutAsync (string instanceKey, bool locked, string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set group locked.
        /// </summary>
        /// <remarks>
        /// Set if non-admins are allowed to change the group dp and other stuff
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="locked">Locked status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdLockPutWithHttpInfoAsync (string instanceKey, bool locked, string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set group name.
        /// </summary>
        /// <remarks>
        /// Changes the group name. The max limit is 22 chars
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group name data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdNamePutAsync (string instanceKey, string groupId, StructsGroupUpdateNamePayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set group name.
        /// </summary>
        /// <remarks>
        /// Changes the group name. The max limit is 22 chars
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group name data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdNamePutWithHttpInfoAsync (string instanceKey, string groupId, StructsGroupUpdateNamePayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add participant.
        /// </summary>
        /// <remarks>
        /// Handles adding participants to a group. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdParticipantsAddPostAsync (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add participant.
        /// </summary>
        /// <remarks>
        /// Handles adding participants to a group. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdParticipantsAddPostWithHttpInfoAsync (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Demote participant.
        /// </summary>
        /// <remarks>
        /// Demotes admins in groups. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdParticipantsDemotePutAsync (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Demote participant.
        /// </summary>
        /// <remarks>
        /// Demotes admins in groups. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdParticipantsDemotePutWithHttpInfoAsync (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Promote participant.
        /// </summary>
        /// <remarks>
        /// Promotes participants to admin. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdParticipantsPromotePutAsync (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Promote participant.
        /// </summary>
        /// <remarks>
        /// Promotes participants to admin. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdParticipantsPromotePutWithHttpInfoAsync (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove participant.
        /// </summary>
        /// <remarks>
        /// Handles removing participants from a group. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteAsync (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove participant.
        /// </summary>
        /// <remarks>
        /// Handles removing participants from a group. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteWithHttpInfoAsync (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set group picture.
        /// </summary>
        /// <remarks>
        /// Changes the group profile picture. Currently it only seems to accept JPEG images only
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="instancesInstanceKeyGroupsGroupIdProfilePicPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdProfilePicPutAsync (string instanceKey, string groupId, InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest instancesInstanceKeyGroupsGroupIdProfilePicPutRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set group picture.
        /// </summary>
        /// <remarks>
        /// Changes the group profile picture. Currently it only seems to accept JPEG images only
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="instancesInstanceKeyGroupsGroupIdProfilePicPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdProfilePicPutWithHttpInfoAsync (string instanceKey, string groupId, InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest instancesInstanceKeyGroupsGroupIdProfilePicPutRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get group from invite link.
        /// </summary>
        /// <remarks>
        /// Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteLink">The invite link to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsInviteInfoGetAsync (string instanceKey, string inviteLink, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get group from invite link.
        /// </summary>
        /// <remarks>
        /// Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteLink">The invite link to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsInviteInfoGetWithHttpInfoAsync (string instanceKey, string inviteLink, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupManagementApi : IGroupManagementApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupManagementApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupManagementApi"/> class
        /// </summary>
        /// <returns></returns>
        public GroupManagementApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupManagementApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get admin groupss. Returns list of all groups in which you are admin.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeyGroupsAdminGet (string instanceKey)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeyGroupsAdminGetWithHttpInfo(instanceKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get admin groupss. Returns list of all groups in which you are admin.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsAdminGetWithHttpInfo (string instanceKey)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsAdminGet");

            var localVarPath = "/instances/{instance_key}/groups/admin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsAdminGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Get admin groupss. Returns list of all groups in which you are admin.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsAdminGetAsync (string instanceKey, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeyGroupsAdminGetWithHttpInfoAsync(instanceKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get admin groupss. Returns list of all groups in which you are admin.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsAdminGetWithHttpInfoAsync (string instanceKey, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsAdminGet");

            var localVarPath = "/instances/{instance_key}/groups/admin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsAdminGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Create group. Creates a group with the participant data. The creator is automatically added to the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Group create payload</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeyGroupsCreatePost (string instanceKey, StructsGroupCreatePayload data)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeyGroupsCreatePostWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create group. Creates a group with the participant data. The creator is automatically added to the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Group create payload</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsCreatePostWithHttpInfo (string instanceKey, StructsGroupCreatePayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsCreatePost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->InstancesInstanceKeyGroupsCreatePost");

            var localVarPath = "/instances/{instance_key}/groups/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Create group. Creates a group with the participant data. The creator is automatically added to the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Group create payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsCreatePostAsync (string instanceKey, StructsGroupCreatePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeyGroupsCreatePostWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create group. Creates a group with the participant data. The creator is automatically added to the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Group create payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsCreatePostWithHttpInfoAsync (string instanceKey, StructsGroupCreatePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsCreatePost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->InstancesInstanceKeyGroupsCreatePost");

            var localVarPath = "/instances/{instance_key}/groups/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Get all groups. Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="includeParticipants">Include participants data (optional, default to true)</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeyGroupsGet (string instanceKey, string includeParticipants = default(string))
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeyGroupsGetWithHttpInfo(instanceKey, includeParticipants);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all groups. Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="includeParticipants">Include participants data (optional, default to true)</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGetWithHttpInfo (string instanceKey, string includeParticipants = default(string))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGet");

            var localVarPath = "/instances/{instance_key}/groups/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (includeParticipants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_participants", includeParticipants)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Get all groups. Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="includeParticipants">Include participants data (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGetAsync (string instanceKey, string includeParticipants = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeyGroupsGetWithHttpInfoAsync(instanceKey, includeParticipants, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all groups. Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="includeParticipants">Include participants data (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGetWithHttpInfoAsync (string instanceKey, string includeParticipants = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGet");

            var localVarPath = "/instances/{instance_key}/groups/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (includeParticipants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_participants", includeParticipants)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Set group announce. Set if non-admins are allowed to send messages in groups
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="announce">Announce status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeyGroupsGroupIdAnnouncePut (string instanceKey, bool announce, string groupId)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeyGroupsGroupIdAnnouncePutWithHttpInfo(instanceKey, announce, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set group announce. Set if non-admins are allowed to send messages in groups
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="announce">Announce status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdAnnouncePutWithHttpInfo (string instanceKey, bool announce, string groupId)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdAnnouncePut");
            // verify the required parameter 'announce' is set
            if (announce == null)
                throw new ApiException(400, "Missing required parameter 'announce' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdAnnouncePut");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdAnnouncePut");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/announce";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (announce != null) localVarPathParams.Add("announce", this.Configuration.ApiClient.ParameterToString(announce)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdAnnouncePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Set group announce. Set if non-admins are allowed to send messages in groups
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="announce">Announce status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdAnnouncePutAsync (string instanceKey, bool announce, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeyGroupsGroupIdAnnouncePutWithHttpInfoAsync(instanceKey, announce, groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set group announce. Set if non-admins are allowed to send messages in groups
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="announce">Announce status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdAnnouncePutWithHttpInfoAsync (string instanceKey, bool announce, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdAnnouncePut");
            // verify the required parameter 'announce' is set
            if (announce == null)
                throw new ApiException(400, "Missing required parameter 'announce' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdAnnouncePut");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdAnnouncePut");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/announce";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (announce != null) localVarPathParams.Add("announce", this.Configuration.ApiClient.ParameterToString(announce)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdAnnouncePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Leaves the group. Leaves the specified group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeyGroupsGroupIdDelete (string instanceKey, string groupId)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeyGroupsGroupIdDeleteWithHttpInfo(instanceKey, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Leaves the group. Leaves the specified group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdDeleteWithHttpInfo (string instanceKey, string groupId)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdDelete");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdDelete");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Leaves the group. Leaves the specified group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdDeleteAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeyGroupsGroupIdDeleteWithHttpInfoAsync(instanceKey, groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Leaves the group. Leaves the specified group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdDeleteWithHttpInfoAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdDelete");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdDelete");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Set group description. Changes the group description
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group description data</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeyGroupsGroupIdDescriptionPut (string instanceKey, string groupId, StructsGroupUpdateDescriptionPayload data)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeyGroupsGroupIdDescriptionPutWithHttpInfo(instanceKey, groupId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set group description. Changes the group description
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group description data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdDescriptionPutWithHttpInfo (string instanceKey, string groupId, StructsGroupUpdateDescriptionPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdDescriptionPut");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdDescriptionPut");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdDescriptionPut");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/description";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdDescriptionPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Set group description. Changes the group description
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group description data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdDescriptionPutAsync (string instanceKey, string groupId, StructsGroupUpdateDescriptionPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeyGroupsGroupIdDescriptionPutWithHttpInfoAsync(instanceKey, groupId, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set group description. Changes the group description
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group description data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdDescriptionPutWithHttpInfoAsync (string instanceKey, string groupId, StructsGroupUpdateDescriptionPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdDescriptionPut");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdDescriptionPut");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdDescriptionPut");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/description";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdDescriptionPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Get group. Fetches the group data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeyGroupsGroupIdGet (string instanceKey, string groupId)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeyGroupsGroupIdGetWithHttpInfo(instanceKey, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get group. Fetches the group data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdGetWithHttpInfo (string instanceKey, string groupId)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdGet");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdGet");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Get group. Fetches the group data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdGetAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeyGroupsGroupIdGetWithHttpInfoAsync(instanceKey, groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get group. Fetches the group data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdGetWithHttpInfoAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdGet");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdGet");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Get group invite code. Gets the invite code of the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeyGroupsGroupIdInviteCodeGet (string instanceKey, string groupId)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeyGroupsGroupIdInviteCodeGetWithHttpInfo(instanceKey, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get group invite code. Gets the invite code of the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdInviteCodeGetWithHttpInfo (string instanceKey, string groupId)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdInviteCodeGet");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdInviteCodeGet");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/invite-code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdInviteCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Get group invite code. Gets the invite code of the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdInviteCodeGetAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeyGroupsGroupIdInviteCodeGetWithHttpInfoAsync(instanceKey, groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get group invite code. Gets the invite code of the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdInviteCodeGetWithHttpInfoAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdInviteCodeGet");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdInviteCodeGet");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/invite-code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdInviteCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Set group locked. Set if non-admins are allowed to change the group dp and other stuff
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="locked">Locked status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeyGroupsGroupIdLockPut (string instanceKey, bool locked, string groupId)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeyGroupsGroupIdLockPutWithHttpInfo(instanceKey, locked, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set group locked. Set if non-admins are allowed to change the group dp and other stuff
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="locked">Locked status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdLockPutWithHttpInfo (string instanceKey, bool locked, string groupId)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdLockPut");
            // verify the required parameter 'locked' is set
            if (locked == null)
                throw new ApiException(400, "Missing required parameter 'locked' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdLockPut");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdLockPut");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (locked != null) localVarPathParams.Add("locked", this.Configuration.ApiClient.ParameterToString(locked)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdLockPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Set group locked. Set if non-admins are allowed to change the group dp and other stuff
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="locked">Locked status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdLockPutAsync (string instanceKey, bool locked, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeyGroupsGroupIdLockPutWithHttpInfoAsync(instanceKey, locked, groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set group locked. Set if non-admins are allowed to change the group dp and other stuff
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="locked">Locked status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdLockPutWithHttpInfoAsync (string instanceKey, bool locked, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdLockPut");
            // verify the required parameter 'locked' is set
            if (locked == null)
                throw new ApiException(400, "Missing required parameter 'locked' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdLockPut");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdLockPut");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (locked != null) localVarPathParams.Add("locked", this.Configuration.ApiClient.ParameterToString(locked)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdLockPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Set group name. Changes the group name. The max limit is 22 chars
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group name data</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeyGroupsGroupIdNamePut (string instanceKey, string groupId, StructsGroupUpdateNamePayload data)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeyGroupsGroupIdNamePutWithHttpInfo(instanceKey, groupId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set group name. Changes the group name. The max limit is 22 chars
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group name data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdNamePutWithHttpInfo (string instanceKey, string groupId, StructsGroupUpdateNamePayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdNamePut");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdNamePut");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdNamePut");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdNamePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Set group name. Changes the group name. The max limit is 22 chars
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group name data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdNamePutAsync (string instanceKey, string groupId, StructsGroupUpdateNamePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeyGroupsGroupIdNamePutWithHttpInfoAsync(instanceKey, groupId, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set group name. Changes the group name. The max limit is 22 chars
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group name data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdNamePutWithHttpInfoAsync (string instanceKey, string groupId, StructsGroupUpdateNamePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdNamePut");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdNamePut");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdNamePut");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdNamePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Add participant. Handles adding participants to a group. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeyGroupsGroupIdParticipantsAddPost (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeyGroupsGroupIdParticipantsAddPostWithHttpInfo(instanceKey, groupId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add participant. Handles adding participants to a group. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdParticipantsAddPostWithHttpInfo (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsAddPost");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsAddPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsAddPost");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdParticipantsAddPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Add participant. Handles adding participants to a group. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdParticipantsAddPostAsync (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeyGroupsGroupIdParticipantsAddPostWithHttpInfoAsync(instanceKey, groupId, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add participant. Handles adding participants to a group. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdParticipantsAddPostWithHttpInfoAsync (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsAddPost");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsAddPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsAddPost");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdParticipantsAddPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Demote participant. Demotes admins in groups. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeyGroupsGroupIdParticipantsDemotePut (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeyGroupsGroupIdParticipantsDemotePutWithHttpInfo(instanceKey, groupId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Demote participant. Demotes admins in groups. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdParticipantsDemotePutWithHttpInfo (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsDemotePut");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsDemotePut");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsDemotePut");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/demote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdParticipantsDemotePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Demote participant. Demotes admins in groups. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdParticipantsDemotePutAsync (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeyGroupsGroupIdParticipantsDemotePutWithHttpInfoAsync(instanceKey, groupId, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Demote participant. Demotes admins in groups. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdParticipantsDemotePutWithHttpInfoAsync (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsDemotePut");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsDemotePut");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsDemotePut");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/demote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdParticipantsDemotePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Promote participant. Promotes participants to admin. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeyGroupsGroupIdParticipantsPromotePut (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeyGroupsGroupIdParticipantsPromotePutWithHttpInfo(instanceKey, groupId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Promote participant. Promotes participants to admin. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdParticipantsPromotePutWithHttpInfo (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsPromotePut");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsPromotePut");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsPromotePut");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/promote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdParticipantsPromotePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Promote participant. Promotes participants to admin. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdParticipantsPromotePutAsync (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeyGroupsGroupIdParticipantsPromotePutWithHttpInfoAsync(instanceKey, groupId, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Promote participant. Promotes participants to admin. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdParticipantsPromotePutWithHttpInfoAsync (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsPromotePut");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsPromotePut");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsPromotePut");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/promote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdParticipantsPromotePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Remove participant. Handles removing participants from a group. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteWithHttpInfo(instanceKey, groupId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove participant. Handles removing participants from a group. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteWithHttpInfo (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Remove participant. Handles removing participants from a group. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteAsync (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteWithHttpInfoAsync(instanceKey, groupId, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove participant. Handles removing participants from a group. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteWithHttpInfoAsync (string instanceKey, string groupId, StructsGroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Set group picture. Changes the group profile picture. Currently it only seems to accept JPEG images only
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="instancesInstanceKeyGroupsGroupIdProfilePicPutRequest"></param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeyGroupsGroupIdProfilePicPut (string instanceKey, string groupId, InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest instancesInstanceKeyGroupsGroupIdProfilePicPutRequest)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeyGroupsGroupIdProfilePicPutWithHttpInfo(instanceKey, groupId, instancesInstanceKeyGroupsGroupIdProfilePicPutRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set group picture. Changes the group profile picture. Currently it only seems to accept JPEG images only
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="instancesInstanceKeyGroupsGroupIdProfilePicPutRequest"></param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdProfilePicPutWithHttpInfo (string instanceKey, string groupId, InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest instancesInstanceKeyGroupsGroupIdProfilePicPutRequest)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdProfilePicPut");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdProfilePicPut");
            // verify the required parameter 'instancesInstanceKeyGroupsGroupIdProfilePicPutRequest' is set
            if (instancesInstanceKeyGroupsGroupIdProfilePicPutRequest == null)
                throw new ApiException(400, "Missing required parameter 'instancesInstanceKeyGroupsGroupIdProfilePicPutRequest' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdProfilePicPut");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/profile-pic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (instancesInstanceKeyGroupsGroupIdProfilePicPutRequest != null && instancesInstanceKeyGroupsGroupIdProfilePicPutRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instancesInstanceKeyGroupsGroupIdProfilePicPutRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instancesInstanceKeyGroupsGroupIdProfilePicPutRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdProfilePicPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Set group picture. Changes the group profile picture. Currently it only seems to accept JPEG images only
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="instancesInstanceKeyGroupsGroupIdProfilePicPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsGroupIdProfilePicPutAsync (string instanceKey, string groupId, InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest instancesInstanceKeyGroupsGroupIdProfilePicPutRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeyGroupsGroupIdProfilePicPutWithHttpInfoAsync(instanceKey, groupId, instancesInstanceKeyGroupsGroupIdProfilePicPutRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set group picture. Changes the group profile picture. Currently it only seems to accept JPEG images only
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="instancesInstanceKeyGroupsGroupIdProfilePicPutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsGroupIdProfilePicPutWithHttpInfoAsync (string instanceKey, string groupId, InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest instancesInstanceKeyGroupsGroupIdProfilePicPutRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdProfilePicPut");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdProfilePicPut");
            // verify the required parameter 'instancesInstanceKeyGroupsGroupIdProfilePicPutRequest' is set
            if (instancesInstanceKeyGroupsGroupIdProfilePicPutRequest == null)
                throw new ApiException(400, "Missing required parameter 'instancesInstanceKeyGroupsGroupIdProfilePicPutRequest' when calling GroupManagementApi->InstancesInstanceKeyGroupsGroupIdProfilePicPut");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/profile-pic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (instancesInstanceKeyGroupsGroupIdProfilePicPutRequest != null && instancesInstanceKeyGroupsGroupIdProfilePicPutRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instancesInstanceKeyGroupsGroupIdProfilePicPutRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instancesInstanceKeyGroupsGroupIdProfilePicPutRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsGroupIdProfilePicPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Get group from invite link. Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteLink">The invite link to check</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeyGroupsInviteInfoGet (string instanceKey, string inviteLink)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeyGroupsInviteInfoGetWithHttpInfo(instanceKey, inviteLink);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get group from invite link. Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteLink">The invite link to check</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeyGroupsInviteInfoGetWithHttpInfo (string instanceKey, string inviteLink)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsInviteInfoGet");
            // verify the required parameter 'inviteLink' is set
            if (inviteLink == null)
                throw new ApiException(400, "Missing required parameter 'inviteLink' when calling GroupManagementApi->InstancesInstanceKeyGroupsInviteInfoGet");

            var localVarPath = "/instances/{instance_key}/groups/invite-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (inviteLink != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "invite_link", inviteLink)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsInviteInfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Get group from invite link. Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteLink">The invite link to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyGroupsInviteInfoGetAsync (string instanceKey, string inviteLink, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeyGroupsInviteInfoGetWithHttpInfoAsync(instanceKey, inviteLink, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get group from invite link. Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteLink">The invite link to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyGroupsInviteInfoGetWithHttpInfoAsync (string instanceKey, string inviteLink, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->InstancesInstanceKeyGroupsInviteInfoGet");
            // verify the required parameter 'inviteLink' is set
            if (inviteLink == null)
                throw new ApiException(400, "Missing required parameter 'inviteLink' when calling GroupManagementApi->InstancesInstanceKeyGroupsInviteInfoGet");

            var localVarPath = "/instances/{instance_key}/groups/invite-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (inviteLink != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "invite_link", inviteLink)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyGroupsInviteInfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

    }
}
