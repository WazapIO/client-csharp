/*
 * WhatsAPI Go
 *
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using WhatsAPI.Client;
using WhatsAPI.models;

namespace WhatsAPI.whatsapi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add participant.
        /// </summary>
        /// <remarks>
        /// Handles adding participants to a group. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>APIResponse</returns>
        APIResponse AddParticipant (string instanceKey, string groupId, GroupUpdateParticipantsPayload data);

        /// <summary>
        /// Add participant.
        /// </summary>
        /// <remarks>
        /// Handles adding participants to a group. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> AddParticipantWithHttpInfo (string instanceKey, string groupId, GroupUpdateParticipantsPayload data);
        /// <summary>
        /// Create group.
        /// </summary>
        /// <remarks>
        /// Creates a group with the participant data. The creator is automatically added to the group.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Group create payload</param>
        /// <returns>APIResponse</returns>
        APIResponse CreateGroup (string instanceKey, GroupCreatePayload data);

        /// <summary>
        /// Create group.
        /// </summary>
        /// <remarks>
        /// Creates a group with the participant data. The creator is automatically added to the group.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Group create payload</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> CreateGroupWithHttpInfo (string instanceKey, GroupCreatePayload data);
        /// <summary>
        /// Demote participant.
        /// </summary>
        /// <remarks>
        /// Demotes admins in groups. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>APIResponse</returns>
        APIResponse DemoteParticipant (string instanceKey, string groupId, GroupUpdateParticipantsPayload data);

        /// <summary>
        /// Demote participant.
        /// </summary>
        /// <remarks>
        /// Demotes admins in groups. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> DemoteParticipantWithHttpInfo (string instanceKey, string groupId, GroupUpdateParticipantsPayload data);
        /// <summary>
        /// Get admin groups.
        /// </summary>
        /// <remarks>
        /// Returns list of all groups in which you are admin.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <returns>APIResponse</returns>
        APIResponse GetAdminGroups (string instanceKey);

        /// <summary>
        /// Get admin groups.
        /// </summary>
        /// <remarks>
        /// Returns list of all groups in which you are admin.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> GetAdminGroupsWithHttpInfo (string instanceKey);
        /// <summary>
        /// Get all groups.
        /// </summary>
        /// <remarks>
        /// Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="includeParticipants">Include participants data (optional, default to true)</param>
        /// <returns>APIResponse</returns>
        APIResponse GetAllGroups (string instanceKey, string includeParticipants = default(string));

        /// <summary>
        /// Get all groups.
        /// </summary>
        /// <remarks>
        /// Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="includeParticipants">Include participants data (optional, default to true)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> GetAllGroupsWithHttpInfo (string instanceKey, string includeParticipants = default(string));
        /// <summary>
        /// Get all participants.
        /// </summary>
        /// <remarks>
        /// Returns all participants of the group.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>APIResponse</returns>
        APIResponse GetAllParticipants (string instanceKey, string groupId);

        /// <summary>
        /// Get all participants.
        /// </summary>
        /// <remarks>
        /// Returns all participants of the group.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> GetAllParticipantsWithHttpInfo (string instanceKey, string groupId);
        /// <summary>
        /// Get group.
        /// </summary>
        /// <remarks>
        /// Fetches the group data.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>APIResponse</returns>
        APIResponse GetGroup (string instanceKey, string groupId);

        /// <summary>
        /// Get group.
        /// </summary>
        /// <remarks>
        /// Fetches the group data.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> GetGroupWithHttpInfo (string instanceKey, string groupId);
        /// <summary>
        /// Get group from invite link.
        /// </summary>
        /// <remarks>
        /// Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteLink">The invite link to check</param>
        /// <returns>APIResponse</returns>
        APIResponse GetGroupFromInviteLink (string instanceKey, string inviteLink);

        /// <summary>
        /// Get group from invite link.
        /// </summary>
        /// <remarks>
        /// Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteLink">The invite link to check</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> GetGroupFromInviteLinkWithHttpInfo (string instanceKey, string inviteLink);
        /// <summary>
        /// Get group invite code.
        /// </summary>
        /// <remarks>
        /// Gets the invite code of the group.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>APIResponse</returns>
        APIResponse GetGroupInviteCode (string instanceKey, string groupId);

        /// <summary>
        /// Get group invite code.
        /// </summary>
        /// <remarks>
        /// Gets the invite code of the group.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> GetGroupInviteCodeWithHttpInfo (string instanceKey, string groupId);
        /// <summary>
        /// Join group with invite code.
        /// </summary>
        /// <remarks>
        /// Joins a group with group invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode} You have to put invite_code in the url of the request. The invite code is the part after https://chat.whatsapp.com/ For example, if the invite link is https://chat.whatsapp.com/dsfsf34r3d3dsds, then the invite code is `dsfsf34r3d3dsds“
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteCode">The invite code of group you want to join</param>
        /// <returns>APIResponse</returns>
        APIResponse JoinGroupWithLink (string instanceKey, string inviteCode);

        /// <summary>
        /// Join group with invite code.
        /// </summary>
        /// <remarks>
        /// Joins a group with group invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode} You have to put invite_code in the url of the request. The invite code is the part after https://chat.whatsapp.com/ For example, if the invite link is https://chat.whatsapp.com/dsfsf34r3d3dsds, then the invite code is `dsfsf34r3d3dsds“
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteCode">The invite code of group you want to join</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> JoinGroupWithLinkWithHttpInfo (string instanceKey, string inviteCode);
        /// <summary>
        /// Leaves the group.
        /// </summary>
        /// <remarks>
        /// Leaves the specified group.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>APIResponse</returns>
        APIResponse LeaveGroup (string instanceKey, string groupId);

        /// <summary>
        /// Leaves the group.
        /// </summary>
        /// <remarks>
        /// Leaves the specified group.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> LeaveGroupWithHttpInfo (string instanceKey, string groupId);
        /// <summary>
        /// Promote participant.
        /// </summary>
        /// <remarks>
        /// Promotes participants to admin. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>APIResponse</returns>
        APIResponse PromoteParticipant (string instanceKey, string groupId, GroupUpdateParticipantsPayload data);

        /// <summary>
        /// Promote participant.
        /// </summary>
        /// <remarks>
        /// Promotes participants to admin. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> PromoteParticipantWithHttpInfo (string instanceKey, string groupId, GroupUpdateParticipantsPayload data);
        /// <summary>
        /// Remove participant.
        /// </summary>
        /// <remarks>
        /// Handles removing participants from a group. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>APIResponse</returns>
        APIResponse RemoveParticipant (string instanceKey, string groupId, GroupUpdateParticipantsPayload data);

        /// <summary>
        /// Remove participant.
        /// </summary>
        /// <remarks>
        /// Handles removing participants from a group. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> RemoveParticipantWithHttpInfo (string instanceKey, string groupId, GroupUpdateParticipantsPayload data);
        /// <summary>
        /// Set group announce.
        /// </summary>
        /// <remarks>
        /// Set if non-admins are allowed to send messages in groups
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="announce">Announce status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>APIResponse</returns>
        APIResponse SetGroupAnnounce (string instanceKey, bool announce, string groupId);

        /// <summary>
        /// Set group announce.
        /// </summary>
        /// <remarks>
        /// Set if non-admins are allowed to send messages in groups
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="announce">Announce status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SetGroupAnnounceWithHttpInfo (string instanceKey, bool announce, string groupId);
        /// <summary>
        /// Set group description.
        /// </summary>
        /// <remarks>
        /// Changes the group description
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group description data</param>
        /// <returns>APIResponse</returns>
        APIResponse SetGroupDescription (string instanceKey, string groupId, GroupUpdateDescriptionPayload data);

        /// <summary>
        /// Set group description.
        /// </summary>
        /// <remarks>
        /// Changes the group description
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group description data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SetGroupDescriptionWithHttpInfo (string instanceKey, string groupId, GroupUpdateDescriptionPayload data);
        /// <summary>
        /// Set group locked.
        /// </summary>
        /// <remarks>
        /// Set if non-admins are allowed to change the group dp and other stuff
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="locked">Locked status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>APIResponse</returns>
        APIResponse SetGroupLocked (string instanceKey, bool locked, string groupId);

        /// <summary>
        /// Set group locked.
        /// </summary>
        /// <remarks>
        /// Set if non-admins are allowed to change the group dp and other stuff
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="locked">Locked status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SetGroupLockedWithHttpInfo (string instanceKey, bool locked, string groupId);
        /// <summary>
        /// Set group name.
        /// </summary>
        /// <remarks>
        /// Changes the group name. The max limit is 22 chars
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group name data</param>
        /// <returns>APIResponse</returns>
        APIResponse SetGroupName (string instanceKey, string groupId, GroupUpdateNamePayload data);

        /// <summary>
        /// Set group name.
        /// </summary>
        /// <remarks>
        /// Changes the group name. The max limit is 22 chars
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group name data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SetGroupNameWithHttpInfo (string instanceKey, string groupId, GroupUpdateNamePayload data);
        /// <summary>
        /// Set group picture.
        /// </summary>
        /// <remarks>
        /// Changes the group profile picture. Currently it only seems to accept JPEG images only
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="setGroupPictureRequest"></param>
        /// <returns>APIResponse</returns>
        APIResponse SetGroupPicture (string instanceKey, string groupId, SetGroupPictureRequest setGroupPictureRequest);

        /// <summary>
        /// Set group picture.
        /// </summary>
        /// <remarks>
        /// Changes the group profile picture. Currently it only seems to accept JPEG images only
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="setGroupPictureRequest"></param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SetGroupPictureWithHttpInfo (string instanceKey, string groupId, SetGroupPictureRequest setGroupPictureRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add participant.
        /// </summary>
        /// <remarks>
        /// Handles adding participants to a group. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> AddParticipantAsync (string instanceKey, string groupId, GroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add participant.
        /// </summary>
        /// <remarks>
        /// Handles adding participants to a group. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> AddParticipantWithHttpInfoAsync (string instanceKey, string groupId, GroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create group.
        /// </summary>
        /// <remarks>
        /// Creates a group with the participant data. The creator is automatically added to the group.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Group create payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> CreateGroupAsync (string instanceKey, GroupCreatePayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create group.
        /// </summary>
        /// <remarks>
        /// Creates a group with the participant data. The creator is automatically added to the group.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Group create payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> CreateGroupWithHttpInfoAsync (string instanceKey, GroupCreatePayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Demote participant.
        /// </summary>
        /// <remarks>
        /// Demotes admins in groups. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> DemoteParticipantAsync (string instanceKey, string groupId, GroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Demote participant.
        /// </summary>
        /// <remarks>
        /// Demotes admins in groups. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> DemoteParticipantWithHttpInfoAsync (string instanceKey, string groupId, GroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get admin groups.
        /// </summary>
        /// <remarks>
        /// Returns list of all groups in which you are admin.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> GetAdminGroupsAsync (string instanceKey, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get admin groups.
        /// </summary>
        /// <remarks>
        /// Returns list of all groups in which you are admin.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> GetAdminGroupsWithHttpInfoAsync (string instanceKey, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get all groups.
        /// </summary>
        /// <remarks>
        /// Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="includeParticipants">Include participants data (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> GetAllGroupsAsync (string instanceKey, string includeParticipants = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all groups.
        /// </summary>
        /// <remarks>
        /// Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="includeParticipants">Include participants data (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> GetAllGroupsWithHttpInfoAsync (string instanceKey, string includeParticipants = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get all participants.
        /// </summary>
        /// <remarks>
        /// Returns all participants of the group.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> GetAllParticipantsAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all participants.
        /// </summary>
        /// <remarks>
        /// Returns all participants of the group.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> GetAllParticipantsWithHttpInfoAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get group.
        /// </summary>
        /// <remarks>
        /// Fetches the group data.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> GetGroupAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get group.
        /// </summary>
        /// <remarks>
        /// Fetches the group data.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> GetGroupWithHttpInfoAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get group from invite link.
        /// </summary>
        /// <remarks>
        /// Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteLink">The invite link to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> GetGroupFromInviteLinkAsync (string instanceKey, string inviteLink, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get group from invite link.
        /// </summary>
        /// <remarks>
        /// Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteLink">The invite link to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> GetGroupFromInviteLinkWithHttpInfoAsync (string instanceKey, string inviteLink, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get group invite code.
        /// </summary>
        /// <remarks>
        /// Gets the invite code of the group.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> GetGroupInviteCodeAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get group invite code.
        /// </summary>
        /// <remarks>
        /// Gets the invite code of the group.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> GetGroupInviteCodeWithHttpInfoAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Join group with invite code.
        /// </summary>
        /// <remarks>
        /// Joins a group with group invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode} You have to put invite_code in the url of the request. The invite code is the part after https://chat.whatsapp.com/ For example, if the invite link is https://chat.whatsapp.com/dsfsf34r3d3dsds, then the invite code is `dsfsf34r3d3dsds“
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteCode">The invite code of group you want to join</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> JoinGroupWithLinkAsync (string instanceKey, string inviteCode, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Join group with invite code.
        /// </summary>
        /// <remarks>
        /// Joins a group with group invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode} You have to put invite_code in the url of the request. The invite code is the part after https://chat.whatsapp.com/ For example, if the invite link is https://chat.whatsapp.com/dsfsf34r3d3dsds, then the invite code is `dsfsf34r3d3dsds“
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteCode">The invite code of group you want to join</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> JoinGroupWithLinkWithHttpInfoAsync (string instanceKey, string inviteCode, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Leaves the group.
        /// </summary>
        /// <remarks>
        /// Leaves the specified group.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> LeaveGroupAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Leaves the group.
        /// </summary>
        /// <remarks>
        /// Leaves the specified group.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> LeaveGroupWithHttpInfoAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Promote participant.
        /// </summary>
        /// <remarks>
        /// Promotes participants to admin. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> PromoteParticipantAsync (string instanceKey, string groupId, GroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Promote participant.
        /// </summary>
        /// <remarks>
        /// Promotes participants to admin. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> PromoteParticipantWithHttpInfoAsync (string instanceKey, string groupId, GroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove participant.
        /// </summary>
        /// <remarks>
        /// Handles removing participants from a group. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> RemoveParticipantAsync (string instanceKey, string groupId, GroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove participant.
        /// </summary>
        /// <remarks>
        /// Handles removing participants from a group. You must be admin in the group or the query will fail.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> RemoveParticipantWithHttpInfoAsync (string instanceKey, string groupId, GroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set group announce.
        /// </summary>
        /// <remarks>
        /// Set if non-admins are allowed to send messages in groups
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="announce">Announce status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SetGroupAnnounceAsync (string instanceKey, bool announce, string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set group announce.
        /// </summary>
        /// <remarks>
        /// Set if non-admins are allowed to send messages in groups
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="announce">Announce status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SetGroupAnnounceWithHttpInfoAsync (string instanceKey, bool announce, string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set group description.
        /// </summary>
        /// <remarks>
        /// Changes the group description
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group description data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SetGroupDescriptionAsync (string instanceKey, string groupId, GroupUpdateDescriptionPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set group description.
        /// </summary>
        /// <remarks>
        /// Changes the group description
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group description data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SetGroupDescriptionWithHttpInfoAsync (string instanceKey, string groupId, GroupUpdateDescriptionPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set group locked.
        /// </summary>
        /// <remarks>
        /// Set if non-admins are allowed to change the group dp and other stuff
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="locked">Locked status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SetGroupLockedAsync (string instanceKey, bool locked, string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set group locked.
        /// </summary>
        /// <remarks>
        /// Set if non-admins are allowed to change the group dp and other stuff
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="locked">Locked status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SetGroupLockedWithHttpInfoAsync (string instanceKey, bool locked, string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set group name.
        /// </summary>
        /// <remarks>
        /// Changes the group name. The max limit is 22 chars
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group name data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SetGroupNameAsync (string instanceKey, string groupId, GroupUpdateNamePayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set group name.
        /// </summary>
        /// <remarks>
        /// Changes the group name. The max limit is 22 chars
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group name data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SetGroupNameWithHttpInfoAsync (string instanceKey, string groupId, GroupUpdateNamePayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set group picture.
        /// </summary>
        /// <remarks>
        /// Changes the group profile picture. Currently it only seems to accept JPEG images only
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="setGroupPictureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SetGroupPictureAsync (string instanceKey, string groupId, SetGroupPictureRequest setGroupPictureRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set group picture.
        /// </summary>
        /// <remarks>
        /// Changes the group profile picture. Currently it only seems to accept JPEG images only
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="setGroupPictureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SetGroupPictureWithHttpInfoAsync (string instanceKey, string groupId, SetGroupPictureRequest setGroupPictureRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupManagementApi : IGroupManagementApi
    {
        private WhatsAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupManagementApi(String basePath)
        {
            this.Configuration = new WhatsAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = WhatsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupManagementApi"/> class
        /// </summary>
        /// <returns></returns>
        public GroupManagementApi()
        {
            this.Configuration = WhatsAPI.Client.Configuration.Default;

            ExceptionFactory = WhatsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupManagementApi(WhatsAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = WhatsAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = WhatsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public WhatsAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WhatsAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add participant. Handles adding participants to a group. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>APIResponse</returns>
        public APIResponse AddParticipant (string instanceKey, string groupId, GroupUpdateParticipantsPayload data)
        {
             ApiResponse<APIResponse> localVarResponse = AddParticipantWithHttpInfo(instanceKey, groupId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add participant. Handles adding participants to a group. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> AddParticipantWithHttpInfo (string instanceKey, string groupId, GroupUpdateParticipantsPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->AddParticipant");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->AddParticipant");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->AddParticipant");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Add participant. Handles adding participants to a group. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> AddParticipantAsync (string instanceKey, string groupId, GroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await AddParticipantWithHttpInfoAsync(instanceKey, groupId, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add participant. Handles adding participants to a group. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> AddParticipantWithHttpInfoAsync (string instanceKey, string groupId, GroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->AddParticipant");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->AddParticipant");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->AddParticipant");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Create group. Creates a group with the participant data. The creator is automatically added to the group.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Group create payload</param>
        /// <returns>APIResponse</returns>
        public APIResponse CreateGroup (string instanceKey, GroupCreatePayload data)
        {
             ApiResponse<APIResponse> localVarResponse = CreateGroupWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create group. Creates a group with the participant data. The creator is automatically added to the group.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Group create payload</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> CreateGroupWithHttpInfo (string instanceKey, GroupCreatePayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->CreateGroup");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->CreateGroup");

            var localVarPath = "/instances/{instance_key}/groups/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Create group. Creates a group with the participant data. The creator is automatically added to the group.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Group create payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> CreateGroupAsync (string instanceKey, GroupCreatePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await CreateGroupWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create group. Creates a group with the participant data. The creator is automatically added to the group.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Group create payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> CreateGroupWithHttpInfoAsync (string instanceKey, GroupCreatePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->CreateGroup");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->CreateGroup");

            var localVarPath = "/instances/{instance_key}/groups/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Demote participant. Demotes admins in groups. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>APIResponse</returns>
        public APIResponse DemoteParticipant (string instanceKey, string groupId, GroupUpdateParticipantsPayload data)
        {
             ApiResponse<APIResponse> localVarResponse = DemoteParticipantWithHttpInfo(instanceKey, groupId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Demote participant. Demotes admins in groups. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> DemoteParticipantWithHttpInfo (string instanceKey, string groupId, GroupUpdateParticipantsPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->DemoteParticipant");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->DemoteParticipant");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->DemoteParticipant");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/demote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DemoteParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Demote participant. Demotes admins in groups. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> DemoteParticipantAsync (string instanceKey, string groupId, GroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await DemoteParticipantWithHttpInfoAsync(instanceKey, groupId, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Demote participant. Demotes admins in groups. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> DemoteParticipantWithHttpInfoAsync (string instanceKey, string groupId, GroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->DemoteParticipant");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->DemoteParticipant");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->DemoteParticipant");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/demote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DemoteParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Get admin groups. Returns list of all groups in which you are admin.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <returns>APIResponse</returns>
        public APIResponse GetAdminGroups (string instanceKey)
        {
             ApiResponse<APIResponse> localVarResponse = GetAdminGroupsWithHttpInfo(instanceKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get admin groups. Returns list of all groups in which you are admin.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> GetAdminGroupsWithHttpInfo (string instanceKey)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->GetAdminGroups");

            var localVarPath = "/instances/{instance_key}/groups/admin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdminGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Get admin groups. Returns list of all groups in which you are admin.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> GetAdminGroupsAsync (string instanceKey, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await GetAdminGroupsWithHttpInfoAsync(instanceKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get admin groups. Returns list of all groups in which you are admin.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> GetAdminGroupsWithHttpInfoAsync (string instanceKey, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->GetAdminGroups");

            var localVarPath = "/instances/{instance_key}/groups/admin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdminGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Get all groups. Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="includeParticipants">Include participants data (optional, default to true)</param>
        /// <returns>APIResponse</returns>
        public APIResponse GetAllGroups (string instanceKey, string includeParticipants = default(string))
        {
             ApiResponse<APIResponse> localVarResponse = GetAllGroupsWithHttpInfo(instanceKey, includeParticipants);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all groups. Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="includeParticipants">Include participants data (optional, default to true)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> GetAllGroupsWithHttpInfo (string instanceKey, string includeParticipants = default(string))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->GetAllGroups");

            var localVarPath = "/instances/{instance_key}/groups/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (includeParticipants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_participants", includeParticipants)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Get all groups. Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="includeParticipants">Include participants data (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> GetAllGroupsAsync (string instanceKey, string includeParticipants = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await GetAllGroupsWithHttpInfoAsync(instanceKey, includeParticipants, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all groups. Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="includeParticipants">Include participants data (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> GetAllGroupsWithHttpInfoAsync (string instanceKey, string includeParticipants = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->GetAllGroups");

            var localVarPath = "/instances/{instance_key}/groups/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (includeParticipants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_participants", includeParticipants)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Get all participants. Returns all participants of the group.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>APIResponse</returns>
        public APIResponse GetAllParticipants (string instanceKey, string groupId)
        {
             ApiResponse<APIResponse> localVarResponse = GetAllParticipantsWithHttpInfo(instanceKey, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all participants. Returns all participants of the group.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> GetAllParticipantsWithHttpInfo (string instanceKey, string groupId)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->GetAllParticipants");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->GetAllParticipants");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllParticipants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Get all participants. Returns all participants of the group.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> GetAllParticipantsAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await GetAllParticipantsWithHttpInfoAsync(instanceKey, groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all participants. Returns all participants of the group.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> GetAllParticipantsWithHttpInfoAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->GetAllParticipants");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->GetAllParticipants");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllParticipants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Get group. Fetches the group data.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>APIResponse</returns>
        public APIResponse GetGroup (string instanceKey, string groupId)
        {
             ApiResponse<APIResponse> localVarResponse = GetGroupWithHttpInfo(instanceKey, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get group. Fetches the group data.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> GetGroupWithHttpInfo (string instanceKey, string groupId)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->GetGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->GetGroup");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Get group. Fetches the group data.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> GetGroupAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await GetGroupWithHttpInfoAsync(instanceKey, groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get group. Fetches the group data.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> GetGroupWithHttpInfoAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->GetGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->GetGroup");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Get group from invite link. Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteLink">The invite link to check</param>
        /// <returns>APIResponse</returns>
        public APIResponse GetGroupFromInviteLink (string instanceKey, string inviteLink)
        {
             ApiResponse<APIResponse> localVarResponse = GetGroupFromInviteLinkWithHttpInfo(instanceKey, inviteLink);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get group from invite link. Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteLink">The invite link to check</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> GetGroupFromInviteLinkWithHttpInfo (string instanceKey, string inviteLink)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->GetGroupFromInviteLink");
            // verify the required parameter 'inviteLink' is set
            if (inviteLink == null)
                throw new ApiException(400, "Missing required parameter 'inviteLink' when calling GroupManagementApi->GetGroupFromInviteLink");

            var localVarPath = "/instances/{instance_key}/groups/invite-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (inviteLink != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "invite_link", inviteLink)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupFromInviteLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Get group from invite link. Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteLink">The invite link to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> GetGroupFromInviteLinkAsync (string instanceKey, string inviteLink, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await GetGroupFromInviteLinkWithHttpInfoAsync(instanceKey, inviteLink, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get group from invite link. Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteLink">The invite link to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> GetGroupFromInviteLinkWithHttpInfoAsync (string instanceKey, string inviteLink, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->GetGroupFromInviteLink");
            // verify the required parameter 'inviteLink' is set
            if (inviteLink == null)
                throw new ApiException(400, "Missing required parameter 'inviteLink' when calling GroupManagementApi->GetGroupFromInviteLink");

            var localVarPath = "/instances/{instance_key}/groups/invite-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (inviteLink != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "invite_link", inviteLink)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupFromInviteLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Get group invite code. Gets the invite code of the group.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>APIResponse</returns>
        public APIResponse GetGroupInviteCode (string instanceKey, string groupId)
        {
             ApiResponse<APIResponse> localVarResponse = GetGroupInviteCodeWithHttpInfo(instanceKey, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get group invite code. Gets the invite code of the group.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> GetGroupInviteCodeWithHttpInfo (string instanceKey, string groupId)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->GetGroupInviteCode");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->GetGroupInviteCode");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/invite-code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupInviteCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Get group invite code. Gets the invite code of the group.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> GetGroupInviteCodeAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await GetGroupInviteCodeWithHttpInfoAsync(instanceKey, groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get group invite code. Gets the invite code of the group.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> GetGroupInviteCodeWithHttpInfoAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->GetGroupInviteCode");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->GetGroupInviteCode");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/invite-code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupInviteCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Join group with invite code. Joins a group with group invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode} You have to put invite_code in the url of the request. The invite code is the part after https://chat.whatsapp.com/ For example, if the invite link is https://chat.whatsapp.com/dsfsf34r3d3dsds, then the invite code is `dsfsf34r3d3dsds“
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteCode">The invite code of group you want to join</param>
        /// <returns>APIResponse</returns>
        public APIResponse JoinGroupWithLink (string instanceKey, string inviteCode)
        {
             ApiResponse<APIResponse> localVarResponse = JoinGroupWithLinkWithHttpInfo(instanceKey, inviteCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Join group with invite code. Joins a group with group invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode} You have to put invite_code in the url of the request. The invite code is the part after https://chat.whatsapp.com/ For example, if the invite link is https://chat.whatsapp.com/dsfsf34r3d3dsds, then the invite code is `dsfsf34r3d3dsds“
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteCode">The invite code of group you want to join</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> JoinGroupWithLinkWithHttpInfo (string instanceKey, string inviteCode)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->JoinGroupWithLink");
            // verify the required parameter 'inviteCode' is set
            if (inviteCode == null)
                throw new ApiException(400, "Missing required parameter 'inviteCode' when calling GroupManagementApi->JoinGroupWithLink");

            var localVarPath = "/instances/{instance_key}/groups/join";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (inviteCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "invite_code", inviteCode)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JoinGroupWithLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Join group with invite code. Joins a group with group invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode} You have to put invite_code in the url of the request. The invite code is the part after https://chat.whatsapp.com/ For example, if the invite link is https://chat.whatsapp.com/dsfsf34r3d3dsds, then the invite code is `dsfsf34r3d3dsds“
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteCode">The invite code of group you want to join</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> JoinGroupWithLinkAsync (string instanceKey, string inviteCode, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await JoinGroupWithLinkWithHttpInfoAsync(instanceKey, inviteCode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Join group with invite code. Joins a group with group invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode} You have to put invite_code in the url of the request. The invite code is the part after https://chat.whatsapp.com/ For example, if the invite link is https://chat.whatsapp.com/dsfsf34r3d3dsds, then the invite code is `dsfsf34r3d3dsds“
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="inviteCode">The invite code of group you want to join</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> JoinGroupWithLinkWithHttpInfoAsync (string instanceKey, string inviteCode, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->JoinGroupWithLink");
            // verify the required parameter 'inviteCode' is set
            if (inviteCode == null)
                throw new ApiException(400, "Missing required parameter 'inviteCode' when calling GroupManagementApi->JoinGroupWithLink");

            var localVarPath = "/instances/{instance_key}/groups/join";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (inviteCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "invite_code", inviteCode)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JoinGroupWithLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Leaves the group. Leaves the specified group.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>APIResponse</returns>
        public APIResponse LeaveGroup (string instanceKey, string groupId)
        {
             ApiResponse<APIResponse> localVarResponse = LeaveGroupWithHttpInfo(instanceKey, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Leaves the group. Leaves the specified group.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> LeaveGroupWithHttpInfo (string instanceKey, string groupId)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->LeaveGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->LeaveGroup");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Leaves the group. Leaves the specified group.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> LeaveGroupAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await LeaveGroupWithHttpInfoAsync(instanceKey, groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Leaves the group. Leaves the specified group.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> LeaveGroupWithHttpInfoAsync (string instanceKey, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->LeaveGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->LeaveGroup");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Promote participant. Promotes participants to admin. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>APIResponse</returns>
        public APIResponse PromoteParticipant (string instanceKey, string groupId, GroupUpdateParticipantsPayload data)
        {
             ApiResponse<APIResponse> localVarResponse = PromoteParticipantWithHttpInfo(instanceKey, groupId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Promote participant. Promotes participants to admin. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> PromoteParticipantWithHttpInfo (string instanceKey, string groupId, GroupUpdateParticipantsPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->PromoteParticipant");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->PromoteParticipant");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->PromoteParticipant");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/promote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PromoteParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Promote participant. Promotes participants to admin. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> PromoteParticipantAsync (string instanceKey, string groupId, GroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await PromoteParticipantWithHttpInfoAsync(instanceKey, groupId, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Promote participant. Promotes participants to admin. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> PromoteParticipantWithHttpInfoAsync (string instanceKey, string groupId, GroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->PromoteParticipant");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->PromoteParticipant");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->PromoteParticipant");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/promote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PromoteParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Remove participant. Handles removing participants from a group. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>APIResponse</returns>
        public APIResponse RemoveParticipant (string instanceKey, string groupId, GroupUpdateParticipantsPayload data)
        {
             ApiResponse<APIResponse> localVarResponse = RemoveParticipantWithHttpInfo(instanceKey, groupId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove participant. Handles removing participants from a group. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> RemoveParticipantWithHttpInfo (string instanceKey, string groupId, GroupUpdateParticipantsPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->RemoveParticipant");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->RemoveParticipant");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->RemoveParticipant");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Remove participant. Handles removing participants from a group. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> RemoveParticipantAsync (string instanceKey, string groupId, GroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await RemoveParticipantWithHttpInfoAsync(instanceKey, groupId, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove participant. Handles removing participants from a group. You must be admin in the group or the query will fail.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group update payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> RemoveParticipantWithHttpInfoAsync (string instanceKey, string groupId, GroupUpdateParticipantsPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->RemoveParticipant");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->RemoveParticipant");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->RemoveParticipant");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Set group announce. Set if non-admins are allowed to send messages in groups
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="announce">Announce status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>APIResponse</returns>
        public APIResponse SetGroupAnnounce (string instanceKey, bool announce, string groupId)
        {
             ApiResponse<APIResponse> localVarResponse = SetGroupAnnounceWithHttpInfo(instanceKey, announce, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set group announce. Set if non-admins are allowed to send messages in groups
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="announce">Announce status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SetGroupAnnounceWithHttpInfo (string instanceKey, bool announce, string groupId)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->SetGroupAnnounce");
            // verify the required parameter 'announce' is set
            if (announce == null)
                throw new ApiException(400, "Missing required parameter 'announce' when calling GroupManagementApi->SetGroupAnnounce");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->SetGroupAnnounce");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/announce";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (announce != null) localVarPathParams.Add("announce", this.Configuration.ApiClient.ParameterToString(announce)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetGroupAnnounce", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Set group announce. Set if non-admins are allowed to send messages in groups
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="announce">Announce status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SetGroupAnnounceAsync (string instanceKey, bool announce, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SetGroupAnnounceWithHttpInfoAsync(instanceKey, announce, groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set group announce. Set if non-admins are allowed to send messages in groups
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="announce">Announce status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SetGroupAnnounceWithHttpInfoAsync (string instanceKey, bool announce, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->SetGroupAnnounce");
            // verify the required parameter 'announce' is set
            if (announce == null)
                throw new ApiException(400, "Missing required parameter 'announce' when calling GroupManagementApi->SetGroupAnnounce");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->SetGroupAnnounce");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/announce";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (announce != null) localVarPathParams.Add("announce", this.Configuration.ApiClient.ParameterToString(announce)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetGroupAnnounce", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Set group description. Changes the group description
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group description data</param>
        /// <returns>APIResponse</returns>
        public APIResponse SetGroupDescription (string instanceKey, string groupId, GroupUpdateDescriptionPayload data)
        {
             ApiResponse<APIResponse> localVarResponse = SetGroupDescriptionWithHttpInfo(instanceKey, groupId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set group description. Changes the group description
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group description data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SetGroupDescriptionWithHttpInfo (string instanceKey, string groupId, GroupUpdateDescriptionPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->SetGroupDescription");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->SetGroupDescription");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->SetGroupDescription");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/description";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetGroupDescription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Set group description. Changes the group description
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group description data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SetGroupDescriptionAsync (string instanceKey, string groupId, GroupUpdateDescriptionPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SetGroupDescriptionWithHttpInfoAsync(instanceKey, groupId, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set group description. Changes the group description
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group description data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SetGroupDescriptionWithHttpInfoAsync (string instanceKey, string groupId, GroupUpdateDescriptionPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->SetGroupDescription");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->SetGroupDescription");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->SetGroupDescription");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/description";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetGroupDescription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Set group locked. Set if non-admins are allowed to change the group dp and other stuff
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="locked">Locked status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>APIResponse</returns>
        public APIResponse SetGroupLocked (string instanceKey, bool locked, string groupId)
        {
             ApiResponse<APIResponse> localVarResponse = SetGroupLockedWithHttpInfo(instanceKey, locked, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set group locked. Set if non-admins are allowed to change the group dp and other stuff
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="locked">Locked status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SetGroupLockedWithHttpInfo (string instanceKey, bool locked, string groupId)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->SetGroupLocked");
            // verify the required parameter 'locked' is set
            if (locked == null)
                throw new ApiException(400, "Missing required parameter 'locked' when calling GroupManagementApi->SetGroupLocked");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->SetGroupLocked");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (locked != null) localVarPathParams.Add("locked", this.Configuration.ApiClient.ParameterToString(locked)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetGroupLocked", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Set group locked. Set if non-admins are allowed to change the group dp and other stuff
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="locked">Locked status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SetGroupLockedAsync (string instanceKey, bool locked, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SetGroupLockedWithHttpInfoAsync(instanceKey, locked, groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set group locked. Set if non-admins are allowed to change the group dp and other stuff
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="locked">Locked status</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SetGroupLockedWithHttpInfoAsync (string instanceKey, bool locked, string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->SetGroupLocked");
            // verify the required parameter 'locked' is set
            if (locked == null)
                throw new ApiException(400, "Missing required parameter 'locked' when calling GroupManagementApi->SetGroupLocked");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->SetGroupLocked");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (locked != null) localVarPathParams.Add("locked", this.Configuration.ApiClient.ParameterToString(locked)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetGroupLocked", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Set group name. Changes the group name. The max limit is 22 chars
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group name data</param>
        /// <returns>APIResponse</returns>
        public APIResponse SetGroupName (string instanceKey, string groupId, GroupUpdateNamePayload data)
        {
             ApiResponse<APIResponse> localVarResponse = SetGroupNameWithHttpInfo(instanceKey, groupId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set group name. Changes the group name. The max limit is 22 chars
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group name data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SetGroupNameWithHttpInfo (string instanceKey, string groupId, GroupUpdateNamePayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->SetGroupName");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->SetGroupName");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->SetGroupName");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetGroupName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Set group name. Changes the group name. The max limit is 22 chars
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group name data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SetGroupNameAsync (string instanceKey, string groupId, GroupUpdateNamePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SetGroupNameWithHttpInfoAsync(instanceKey, groupId, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set group name. Changes the group name. The max limit is 22 chars
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="data">Group name data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SetGroupNameWithHttpInfoAsync (string instanceKey, string groupId, GroupUpdateNamePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->SetGroupName");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->SetGroupName");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling GroupManagementApi->SetGroupName");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetGroupName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Set group picture. Changes the group profile picture. Currently it only seems to accept JPEG images only
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="setGroupPictureRequest"></param>
        /// <returns>APIResponse</returns>
        public APIResponse SetGroupPicture (string instanceKey, string groupId, SetGroupPictureRequest setGroupPictureRequest)
        {
             ApiResponse<APIResponse> localVarResponse = SetGroupPictureWithHttpInfo(instanceKey, groupId, setGroupPictureRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set group picture. Changes the group profile picture. Currently it only seems to accept JPEG images only
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="setGroupPictureRequest"></param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SetGroupPictureWithHttpInfo (string instanceKey, string groupId, SetGroupPictureRequest setGroupPictureRequest)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->SetGroupPicture");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->SetGroupPicture");
            // verify the required parameter 'setGroupPictureRequest' is set
            if (setGroupPictureRequest == null)
                throw new ApiException(400, "Missing required parameter 'setGroupPictureRequest' when calling GroupManagementApi->SetGroupPicture");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/profile-pic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (setGroupPictureRequest != null && setGroupPictureRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setGroupPictureRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setGroupPictureRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetGroupPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Set group picture. Changes the group profile picture. Currently it only seems to accept JPEG images only
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="setGroupPictureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SetGroupPictureAsync (string instanceKey, string groupId, SetGroupPictureRequest setGroupPictureRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SetGroupPictureWithHttpInfoAsync(instanceKey, groupId, setGroupPictureRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set group picture. Changes the group profile picture. Currently it only seems to accept JPEG images only
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="groupId">Group id of the group</param>
        /// <param name="setGroupPictureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SetGroupPictureWithHttpInfoAsync (string instanceKey, string groupId, SetGroupPictureRequest setGroupPictureRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling GroupManagementApi->SetGroupPicture");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupManagementApi->SetGroupPicture");
            // verify the required parameter 'setGroupPictureRequest' is set
            if (setGroupPictureRequest == null)
                throw new ApiException(400, "Missing required parameter 'setGroupPictureRequest' when calling GroupManagementApi->SetGroupPicture");

            var localVarPath = "/instances/{instance_key}/groups/{group_id}/profile-pic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (setGroupPictureRequest != null && setGroupPictureRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setGroupPictureRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setGroupPictureRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetGroupPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

    }
}
