/*
 * WhatsAPI Go
 *
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using WhatsAPI.Client;
using WhatsAPI.models;

namespace WhatsAPI.whatsapi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetches the catlog.
        /// </summary>
        /// <remarks>
        /// Gets list of all products registered by you.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <returns>APIResponse</returns>
        APIResponse FetchCatlog (string instanceKey);

        /// <summary>
        /// Fetches the catlog.
        /// </summary>
        /// <remarks>
        /// Gets list of all products registered by you.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> FetchCatlogWithHttpInfo (string instanceKey);
        /// <summary>
        /// Send a payment request.
        /// </summary>
        /// <remarks>
        /// Sends an payment request to a user. Feature is still in beta.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Data</param>
        /// <returns>APIResponse</returns>
        APIResponse SendPaymentRequest (string instanceKey, PaymentRequestPayload data);

        /// <summary>
        /// Send a payment request.
        /// </summary>
        /// <remarks>
        /// Sends an payment request to a user. Feature is still in beta.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SendPaymentRequestWithHttpInfo (string instanceKey, PaymentRequestPayload data);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Fetches the catlog.
        /// </summary>
        /// <remarks>
        /// Gets list of all products registered by you.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> FetchCatlogAsync (string instanceKey, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Fetches the catlog.
        /// </summary>
        /// <remarks>
        /// Gets list of all products registered by you.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> FetchCatlogWithHttpInfoAsync (string instanceKey, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a payment request.
        /// </summary>
        /// <remarks>
        /// Sends an payment request to a user. Feature is still in beta.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SendPaymentRequestAsync (string instanceKey, PaymentRequestPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a payment request.
        /// </summary>
        /// <remarks>
        /// Sends an payment request to a user. Feature is still in beta.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendPaymentRequestWithHttpInfoAsync (string instanceKey, PaymentRequestPayload data, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BusinessManagementApi : IBusinessManagementApi
    {
        private WhatsAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BusinessManagementApi(String basePath)
        {
            this.Configuration = new WhatsAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = WhatsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessManagementApi"/> class
        /// </summary>
        /// <returns></returns>
        public BusinessManagementApi()
        {
            this.Configuration = WhatsAPI.Client.Configuration.Default;

            ExceptionFactory = WhatsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BusinessManagementApi(WhatsAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = WhatsAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = WhatsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public WhatsAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WhatsAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Fetches the catlog. Gets list of all products registered by you.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <returns>APIResponse</returns>
        public APIResponse FetchCatlog (string instanceKey)
        {
             ApiResponse<APIResponse> localVarResponse = FetchCatlogWithHttpInfo(instanceKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches the catlog. Gets list of all products registered by you.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> FetchCatlogWithHttpInfo (string instanceKey)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling BusinessManagementApi->FetchCatlog");

            var localVarPath = "/instances/{instance_key}/business/catalog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchCatlog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Fetches the catlog. Gets list of all products registered by you.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> FetchCatlogAsync (string instanceKey, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await FetchCatlogWithHttpInfoAsync(instanceKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches the catlog. Gets list of all products registered by you.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> FetchCatlogWithHttpInfoAsync (string instanceKey, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling BusinessManagementApi->FetchCatlog");

            var localVarPath = "/instances/{instance_key}/business/catalog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchCatlog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a payment request. Sends an payment request to a user. Feature is still in beta.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Data</param>
        /// <returns>APIResponse</returns>
        public APIResponse SendPaymentRequest (string instanceKey, PaymentRequestPayload data)
        {
             ApiResponse<APIResponse> localVarResponse = SendPaymentRequestWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a payment request. Sends an payment request to a user. Feature is still in beta.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SendPaymentRequestWithHttpInfo (string instanceKey, PaymentRequestPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling BusinessManagementApi->SendPaymentRequest");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling BusinessManagementApi->SendPaymentRequest");

            var localVarPath = "/instances/{instance_key}/business/payment-request";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPaymentRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a payment request. Sends an payment request to a user. Feature is still in beta.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SendPaymentRequestAsync (string instanceKey, PaymentRequestPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SendPaymentRequestWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a payment request. Sends an payment request to a user. Feature is still in beta.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendPaymentRequestWithHttpInfoAsync (string instanceKey, PaymentRequestPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling BusinessManagementApi->SendPaymentRequest");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling BusinessManagementApi->SendPaymentRequest");

            var localVarPath = "/instances/{instance_key}/business/payment-request";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPaymentRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

    }
}
