/*
 * WhatsAPI Go
 *
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using WhatsAPI.Client;
using WhatsAPI.models;

namespace WhatsAPI.whatsapi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessageSendingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetches the catlog.
        /// </summary>
        /// <remarks>
        /// Gets list of all products registered by you.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeyBusinessCatalogGet (string instanceKey);

        /// <summary>
        /// Fetches the catlog.
        /// </summary>
        /// <remarks>
        /// Gets list of all products registered by you.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeyBusinessCatalogGetWithHttpInfo (string instanceKey);
        /// <summary>
        /// Send raw audio.
        /// </summary>
        /// <remarks>
        /// Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendAudioPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeySendAudioPost (string instanceKey, string to, InstancesInstanceKeySendAudioPostRequest instancesInstanceKeySendAudioPostRequest, string caption = default(string));

        /// <summary>
        /// Send raw audio.
        /// </summary>
        /// <remarks>
        /// Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendAudioPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeySendAudioPostWithHttpInfo (string instanceKey, string to, InstancesInstanceKeySendAudioPostRequest instancesInstanceKeySendAudioPostRequest, string caption = default(string));
        /// <summary>
        /// Send a button message with a media header.
        /// </summary>
        /// <remarks>
        /// Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeySendButtonMediaPost (string instanceKey, StructsButtonMessageWithMediaPayload data);

        /// <summary>
        /// Send a button message with a media header.
        /// </summary>
        /// <remarks>
        /// Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeySendButtonMediaPostWithHttpInfo (string instanceKey, StructsButtonMessageWithMediaPayload data);
        /// <summary>
        /// Send a button message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive button message to the given user. Make sure that all the button ids are unique
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeySendButtonsPost (string instanceKey, StructsButtonMessagePayload data);

        /// <summary>
        /// Send a button message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive button message to the given user. Make sure that all the button ids are unique
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeySendButtonsPostWithHttpInfo (string instanceKey, StructsButtonMessagePayload data);
        /// <summary>
        /// Send a contact message.
        /// </summary>
        /// <remarks>
        /// Sends a contact (vcard) message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeySendContactPost (string instanceKey, StructsContactMessagePayload data);

        /// <summary>
        /// Send a contact message.
        /// </summary>
        /// <remarks>
        /// Sends a contact (vcard) message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeySendContactPostWithHttpInfo (string instanceKey, StructsContactMessagePayload data);
        /// <summary>
        /// Send raw document.
        /// </summary>
        /// <remarks>
        /// Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendDocumentPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeySendDocumentPost (string instanceKey, string to, InstancesInstanceKeySendDocumentPostRequest instancesInstanceKeySendDocumentPostRequest, string caption = default(string));

        /// <summary>
        /// Send raw document.
        /// </summary>
        /// <remarks>
        /// Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendDocumentPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeySendDocumentPostWithHttpInfo (string instanceKey, string to, InstancesInstanceKeySendDocumentPostRequest instancesInstanceKeySendDocumentPostRequest, string caption = default(string));
        /// <summary>
        /// Send raw image.
        /// </summary>
        /// <remarks>
        /// Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendImagePostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeySendImagePost (string instanceKey, string to, InstancesInstanceKeySendImagePostRequest instancesInstanceKeySendImagePostRequest, string caption = default(string));

        /// <summary>
        /// Send raw image.
        /// </summary>
        /// <remarks>
        /// Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendImagePostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeySendImagePostWithHttpInfo (string instanceKey, string to, InstancesInstanceKeySendImagePostRequest instancesInstanceKeySendImagePostRequest, string caption = default(string));
        /// <summary>
        /// Send a List message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive List message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeySendListPost (string instanceKey, StructsListMessagePayload data);

        /// <summary>
        /// Send a List message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive List message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeySendListPostWithHttpInfo (string instanceKey, StructsListMessagePayload data);
        /// <summary>
        /// Send a location message.
        /// </summary>
        /// <remarks>
        /// Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeySendLocationPost (string instanceKey, StructsLocationMessagePayload data);

        /// <summary>
        /// Send a location message.
        /// </summary>
        /// <remarks>
        /// Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeySendLocationPostWithHttpInfo (string instanceKey, StructsLocationMessagePayload data);
        /// <summary>
        /// Send a media message.
        /// </summary>
        /// <remarks>
        /// Sends a media message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeySendMediaPost (string instanceKey, StructsSendMediaPayload data);

        /// <summary>
        /// Send a media message.
        /// </summary>
        /// <remarks>
        /// Sends a media message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeySendMediaPostWithHttpInfo (string instanceKey, StructsSendMediaPayload data);
        /// <summary>
        /// Send a Poll message with media.
        /// </summary>
        /// <remarks>
        /// Sends an interactive poll message with a media header to the given user. The poll message is a new feature that is currently in beta.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeySendPollPost (string instanceKey, StructsPollMessagePayload data);

        /// <summary>
        /// Send a Poll message with media.
        /// </summary>
        /// <remarks>
        /// Sends an interactive poll message with a media header to the given user. The poll message is a new feature that is currently in beta.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeySendPollPostWithHttpInfo (string instanceKey, StructsPollMessagePayload data);
        /// <summary>
        /// Send a template message with media.
        /// </summary>
        /// <remarks>
        /// Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeySendTemplateMediaPost (string instanceKey, StructsTemplateButtonWithMediaPayload data);

        /// <summary>
        /// Send a template message with media.
        /// </summary>
        /// <remarks>
        /// Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeySendTemplateMediaPostWithHttpInfo (string instanceKey, StructsTemplateButtonWithMediaPayload data);
        /// <summary>
        /// Send a template message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeySendTemplatePost (string instanceKey, StructsTemplateButtonPayload data);

        /// <summary>
        /// Send a template message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeySendTemplatePostWithHttpInfo (string instanceKey, StructsTemplateButtonPayload data);
        /// <summary>
        /// Send a text message.
        /// </summary>
        /// <remarks>
        /// Sends a text message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeySendTextPost (string instanceKey, StructsTextMessage data);

        /// <summary>
        /// Send a text message.
        /// </summary>
        /// <remarks>
        /// Sends a text message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeySendTextPostWithHttpInfo (string instanceKey, StructsTextMessage data);
        /// <summary>
        /// Upload media.
        /// </summary>
        /// <remarks>
        /// Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="instancesInstanceKeySendUploadPostRequest"></param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeySendUploadPost (string instanceKey, string type, InstancesInstanceKeySendUploadPostRequest instancesInstanceKeySendUploadPostRequest);

        /// <summary>
        /// Upload media.
        /// </summary>
        /// <remarks>
        /// Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="instancesInstanceKeySendUploadPostRequest"></param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeySendUploadPostWithHttpInfo (string instanceKey, string type, InstancesInstanceKeySendUploadPostRequest instancesInstanceKeySendUploadPostRequest);
        /// <summary>
        /// Send raw video.
        /// </summary>
        /// <remarks>
        /// Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendVideoPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>MainAPIResponse</returns>
        MainAPIResponse InstancesInstanceKeySendVideoPost (string instanceKey, string to, InstancesInstanceKeySendVideoPostRequest instancesInstanceKeySendVideoPostRequest, string caption = default(string));

        /// <summary>
        /// Send raw video.
        /// </summary>
        /// <remarks>
        /// Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendVideoPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        ApiResponse<MainAPIResponse> InstancesInstanceKeySendVideoPostWithHttpInfo (string instanceKey, string to, InstancesInstanceKeySendVideoPostRequest instancesInstanceKeySendVideoPostRequest, string caption = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Fetches the catlog.
        /// </summary>
        /// <remarks>
        /// Gets list of all products registered by you.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyBusinessCatalogGetAsync (string instanceKey, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Fetches the catlog.
        /// </summary>
        /// <remarks>
        /// Gets list of all products registered by you.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyBusinessCatalogGetWithHttpInfoAsync (string instanceKey, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send raw audio.
        /// </summary>
        /// <remarks>
        /// Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendAudioPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendAudioPostAsync (string instanceKey, string to, InstancesInstanceKeySendAudioPostRequest instancesInstanceKeySendAudioPostRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send raw audio.
        /// </summary>
        /// <remarks>
        /// Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendAudioPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendAudioPostWithHttpInfoAsync (string instanceKey, string to, InstancesInstanceKeySendAudioPostRequest instancesInstanceKeySendAudioPostRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a button message with a media header.
        /// </summary>
        /// <remarks>
        /// Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendButtonMediaPostAsync (string instanceKey, StructsButtonMessageWithMediaPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a button message with a media header.
        /// </summary>
        /// <remarks>
        /// Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendButtonMediaPostWithHttpInfoAsync (string instanceKey, StructsButtonMessageWithMediaPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a button message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive button message to the given user. Make sure that all the button ids are unique
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendButtonsPostAsync (string instanceKey, StructsButtonMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a button message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive button message to the given user. Make sure that all the button ids are unique
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendButtonsPostWithHttpInfoAsync (string instanceKey, StructsButtonMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a contact message.
        /// </summary>
        /// <remarks>
        /// Sends a contact (vcard) message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendContactPostAsync (string instanceKey, StructsContactMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a contact message.
        /// </summary>
        /// <remarks>
        /// Sends a contact (vcard) message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendContactPostWithHttpInfoAsync (string instanceKey, StructsContactMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send raw document.
        /// </summary>
        /// <remarks>
        /// Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendDocumentPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendDocumentPostAsync (string instanceKey, string to, InstancesInstanceKeySendDocumentPostRequest instancesInstanceKeySendDocumentPostRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send raw document.
        /// </summary>
        /// <remarks>
        /// Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendDocumentPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendDocumentPostWithHttpInfoAsync (string instanceKey, string to, InstancesInstanceKeySendDocumentPostRequest instancesInstanceKeySendDocumentPostRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send raw image.
        /// </summary>
        /// <remarks>
        /// Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendImagePostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendImagePostAsync (string instanceKey, string to, InstancesInstanceKeySendImagePostRequest instancesInstanceKeySendImagePostRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send raw image.
        /// </summary>
        /// <remarks>
        /// Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendImagePostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendImagePostWithHttpInfoAsync (string instanceKey, string to, InstancesInstanceKeySendImagePostRequest instancesInstanceKeySendImagePostRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a List message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive List message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendListPostAsync (string instanceKey, StructsListMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a List message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive List message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendListPostWithHttpInfoAsync (string instanceKey, StructsListMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a location message.
        /// </summary>
        /// <remarks>
        /// Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendLocationPostAsync (string instanceKey, StructsLocationMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a location message.
        /// </summary>
        /// <remarks>
        /// Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendLocationPostWithHttpInfoAsync (string instanceKey, StructsLocationMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a media message.
        /// </summary>
        /// <remarks>
        /// Sends a media message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendMediaPostAsync (string instanceKey, StructsSendMediaPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a media message.
        /// </summary>
        /// <remarks>
        /// Sends a media message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendMediaPostWithHttpInfoAsync (string instanceKey, StructsSendMediaPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a Poll message with media.
        /// </summary>
        /// <remarks>
        /// Sends an interactive poll message with a media header to the given user. The poll message is a new feature that is currently in beta.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendPollPostAsync (string instanceKey, StructsPollMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a Poll message with media.
        /// </summary>
        /// <remarks>
        /// Sends an interactive poll message with a media header to the given user. The poll message is a new feature that is currently in beta.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendPollPostWithHttpInfoAsync (string instanceKey, StructsPollMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a template message with media.
        /// </summary>
        /// <remarks>
        /// Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendTemplateMediaPostAsync (string instanceKey, StructsTemplateButtonWithMediaPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a template message with media.
        /// </summary>
        /// <remarks>
        /// Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendTemplateMediaPostWithHttpInfoAsync (string instanceKey, StructsTemplateButtonWithMediaPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a template message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendTemplatePostAsync (string instanceKey, StructsTemplateButtonPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a template message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendTemplatePostWithHttpInfoAsync (string instanceKey, StructsTemplateButtonPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a text message.
        /// </summary>
        /// <remarks>
        /// Sends a text message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendTextPostAsync (string instanceKey, StructsTextMessage data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a text message.
        /// </summary>
        /// <remarks>
        /// Sends a text message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendTextPostWithHttpInfoAsync (string instanceKey, StructsTextMessage data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Upload media.
        /// </summary>
        /// <remarks>
        /// Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="instancesInstanceKeySendUploadPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendUploadPostAsync (string instanceKey, string type, InstancesInstanceKeySendUploadPostRequest instancesInstanceKeySendUploadPostRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upload media.
        /// </summary>
        /// <remarks>
        /// Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="instancesInstanceKeySendUploadPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendUploadPostWithHttpInfoAsync (string instanceKey, string type, InstancesInstanceKeySendUploadPostRequest instancesInstanceKeySendUploadPostRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send raw video.
        /// </summary>
        /// <remarks>
        /// Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendVideoPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendVideoPostAsync (string instanceKey, string to, InstancesInstanceKeySendVideoPostRequest instancesInstanceKeySendVideoPostRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send raw video.
        /// </summary>
        /// <remarks>
        /// Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendVideoPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendVideoPostWithHttpInfoAsync (string instanceKey, string to, InstancesInstanceKeySendVideoPostRequest instancesInstanceKeySendVideoPostRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessageSendingApi : IMessageSendingApi
    {
        private WhatsAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageSendingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessageSendingApi(String basePath)
        {
            this.Configuration = new WhatsAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = WhatsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageSendingApi"/> class
        /// </summary>
        /// <returns></returns>
        public MessageSendingApi()
        {
            this.Configuration = WhatsAPI.Client.Configuration.Default;

            ExceptionFactory = WhatsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageSendingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessageSendingApi(WhatsAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = WhatsAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = WhatsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public WhatsAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WhatsAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Fetches the catlog. Gets list of all products registered by you.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeyBusinessCatalogGet (string instanceKey)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeyBusinessCatalogGetWithHttpInfo(instanceKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches the catlog. Gets list of all products registered by you.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeyBusinessCatalogGetWithHttpInfo (string instanceKey)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeyBusinessCatalogGet");

            var localVarPath = "/instances/{instance_key}/business/catalog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyBusinessCatalogGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Fetches the catlog. Gets list of all products registered by you.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeyBusinessCatalogGetAsync (string instanceKey, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeyBusinessCatalogGetWithHttpInfoAsync(instanceKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches the catlog. Gets list of all products registered by you.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeyBusinessCatalogGetWithHttpInfoAsync (string instanceKey, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeyBusinessCatalogGet");

            var localVarPath = "/instances/{instance_key}/business/catalog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeyBusinessCatalogGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send raw audio. Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendAudioPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeySendAudioPost (string instanceKey, string to, InstancesInstanceKeySendAudioPostRequest instancesInstanceKeySendAudioPostRequest, string caption = default(string))
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeySendAudioPostWithHttpInfo(instanceKey, to, instancesInstanceKeySendAudioPostRequest, caption);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send raw audio. Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendAudioPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeySendAudioPostWithHttpInfo (string instanceKey, string to, InstancesInstanceKeySendAudioPostRequest instancesInstanceKeySendAudioPostRequest, string caption = default(string))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendAudioPost");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessageSendingApi->InstancesInstanceKeySendAudioPost");
            // verify the required parameter 'instancesInstanceKeySendAudioPostRequest' is set
            if (instancesInstanceKeySendAudioPostRequest == null)
                throw new ApiException(400, "Missing required parameter 'instancesInstanceKeySendAudioPostRequest' when calling MessageSendingApi->InstancesInstanceKeySendAudioPost");

            var localVarPath = "/instances/{instance_key}/send/audio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (caption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caption", caption)); // query parameter
            if (instancesInstanceKeySendAudioPostRequest != null && instancesInstanceKeySendAudioPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instancesInstanceKeySendAudioPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instancesInstanceKeySendAudioPostRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendAudioPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send raw audio. Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendAudioPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendAudioPostAsync (string instanceKey, string to, InstancesInstanceKeySendAudioPostRequest instancesInstanceKeySendAudioPostRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeySendAudioPostWithHttpInfoAsync(instanceKey, to, instancesInstanceKeySendAudioPostRequest, caption, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send raw audio. Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendAudioPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendAudioPostWithHttpInfoAsync (string instanceKey, string to, InstancesInstanceKeySendAudioPostRequest instancesInstanceKeySendAudioPostRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendAudioPost");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessageSendingApi->InstancesInstanceKeySendAudioPost");
            // verify the required parameter 'instancesInstanceKeySendAudioPostRequest' is set
            if (instancesInstanceKeySendAudioPostRequest == null)
                throw new ApiException(400, "Missing required parameter 'instancesInstanceKeySendAudioPostRequest' when calling MessageSendingApi->InstancesInstanceKeySendAudioPost");

            var localVarPath = "/instances/{instance_key}/send/audio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (caption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caption", caption)); // query parameter
            if (instancesInstanceKeySendAudioPostRequest != null && instancesInstanceKeySendAudioPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instancesInstanceKeySendAudioPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instancesInstanceKeySendAudioPostRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendAudioPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a button message with a media header. Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeySendButtonMediaPost (string instanceKey, StructsButtonMessageWithMediaPayload data)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeySendButtonMediaPostWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a button message with a media header. Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeySendButtonMediaPostWithHttpInfo (string instanceKey, StructsButtonMessageWithMediaPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendButtonMediaPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendButtonMediaPost");

            var localVarPath = "/instances/{instance_key}/send/button-media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendButtonMediaPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a button message with a media header. Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendButtonMediaPostAsync (string instanceKey, StructsButtonMessageWithMediaPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeySendButtonMediaPostWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a button message with a media header. Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendButtonMediaPostWithHttpInfoAsync (string instanceKey, StructsButtonMessageWithMediaPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendButtonMediaPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendButtonMediaPost");

            var localVarPath = "/instances/{instance_key}/send/button-media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendButtonMediaPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a button message. Sends an interactive button message to the given user. Make sure that all the button ids are unique
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeySendButtonsPost (string instanceKey, StructsButtonMessagePayload data)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeySendButtonsPostWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a button message. Sends an interactive button message to the given user. Make sure that all the button ids are unique
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeySendButtonsPostWithHttpInfo (string instanceKey, StructsButtonMessagePayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendButtonsPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendButtonsPost");

            var localVarPath = "/instances/{instance_key}/send/buttons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendButtonsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a button message. Sends an interactive button message to the given user. Make sure that all the button ids are unique
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendButtonsPostAsync (string instanceKey, StructsButtonMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeySendButtonsPostWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a button message. Sends an interactive button message to the given user. Make sure that all the button ids are unique
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendButtonsPostWithHttpInfoAsync (string instanceKey, StructsButtonMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendButtonsPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendButtonsPost");

            var localVarPath = "/instances/{instance_key}/send/buttons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendButtonsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a contact message. Sends a contact (vcard) message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeySendContactPost (string instanceKey, StructsContactMessagePayload data)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeySendContactPostWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a contact message. Sends a contact (vcard) message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeySendContactPostWithHttpInfo (string instanceKey, StructsContactMessagePayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendContactPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendContactPost");

            var localVarPath = "/instances/{instance_key}/send/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendContactPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a contact message. Sends a contact (vcard) message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendContactPostAsync (string instanceKey, StructsContactMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeySendContactPostWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a contact message. Sends a contact (vcard) message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendContactPostWithHttpInfoAsync (string instanceKey, StructsContactMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendContactPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendContactPost");

            var localVarPath = "/instances/{instance_key}/send/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendContactPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send raw document. Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendDocumentPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeySendDocumentPost (string instanceKey, string to, InstancesInstanceKeySendDocumentPostRequest instancesInstanceKeySendDocumentPostRequest, string caption = default(string))
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeySendDocumentPostWithHttpInfo(instanceKey, to, instancesInstanceKeySendDocumentPostRequest, caption);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send raw document. Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendDocumentPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeySendDocumentPostWithHttpInfo (string instanceKey, string to, InstancesInstanceKeySendDocumentPostRequest instancesInstanceKeySendDocumentPostRequest, string caption = default(string))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendDocumentPost");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessageSendingApi->InstancesInstanceKeySendDocumentPost");
            // verify the required parameter 'instancesInstanceKeySendDocumentPostRequest' is set
            if (instancesInstanceKeySendDocumentPostRequest == null)
                throw new ApiException(400, "Missing required parameter 'instancesInstanceKeySendDocumentPostRequest' when calling MessageSendingApi->InstancesInstanceKeySendDocumentPost");

            var localVarPath = "/instances/{instance_key}/send/document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (caption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caption", caption)); // query parameter
            if (instancesInstanceKeySendDocumentPostRequest != null && instancesInstanceKeySendDocumentPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instancesInstanceKeySendDocumentPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instancesInstanceKeySendDocumentPostRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendDocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send raw document. Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendDocumentPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendDocumentPostAsync (string instanceKey, string to, InstancesInstanceKeySendDocumentPostRequest instancesInstanceKeySendDocumentPostRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeySendDocumentPostWithHttpInfoAsync(instanceKey, to, instancesInstanceKeySendDocumentPostRequest, caption, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send raw document. Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendDocumentPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendDocumentPostWithHttpInfoAsync (string instanceKey, string to, InstancesInstanceKeySendDocumentPostRequest instancesInstanceKeySendDocumentPostRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendDocumentPost");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessageSendingApi->InstancesInstanceKeySendDocumentPost");
            // verify the required parameter 'instancesInstanceKeySendDocumentPostRequest' is set
            if (instancesInstanceKeySendDocumentPostRequest == null)
                throw new ApiException(400, "Missing required parameter 'instancesInstanceKeySendDocumentPostRequest' when calling MessageSendingApi->InstancesInstanceKeySendDocumentPost");

            var localVarPath = "/instances/{instance_key}/send/document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (caption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caption", caption)); // query parameter
            if (instancesInstanceKeySendDocumentPostRequest != null && instancesInstanceKeySendDocumentPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instancesInstanceKeySendDocumentPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instancesInstanceKeySendDocumentPostRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendDocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send raw image. Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendImagePostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeySendImagePost (string instanceKey, string to, InstancesInstanceKeySendImagePostRequest instancesInstanceKeySendImagePostRequest, string caption = default(string))
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeySendImagePostWithHttpInfo(instanceKey, to, instancesInstanceKeySendImagePostRequest, caption);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send raw image. Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendImagePostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeySendImagePostWithHttpInfo (string instanceKey, string to, InstancesInstanceKeySendImagePostRequest instancesInstanceKeySendImagePostRequest, string caption = default(string))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendImagePost");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessageSendingApi->InstancesInstanceKeySendImagePost");
            // verify the required parameter 'instancesInstanceKeySendImagePostRequest' is set
            if (instancesInstanceKeySendImagePostRequest == null)
                throw new ApiException(400, "Missing required parameter 'instancesInstanceKeySendImagePostRequest' when calling MessageSendingApi->InstancesInstanceKeySendImagePost");

            var localVarPath = "/instances/{instance_key}/send/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (caption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caption", caption)); // query parameter
            if (instancesInstanceKeySendImagePostRequest != null && instancesInstanceKeySendImagePostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instancesInstanceKeySendImagePostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instancesInstanceKeySendImagePostRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendImagePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send raw image. Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendImagePostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendImagePostAsync (string instanceKey, string to, InstancesInstanceKeySendImagePostRequest instancesInstanceKeySendImagePostRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeySendImagePostWithHttpInfoAsync(instanceKey, to, instancesInstanceKeySendImagePostRequest, caption, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send raw image. Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendImagePostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendImagePostWithHttpInfoAsync (string instanceKey, string to, InstancesInstanceKeySendImagePostRequest instancesInstanceKeySendImagePostRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendImagePost");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessageSendingApi->InstancesInstanceKeySendImagePost");
            // verify the required parameter 'instancesInstanceKeySendImagePostRequest' is set
            if (instancesInstanceKeySendImagePostRequest == null)
                throw new ApiException(400, "Missing required parameter 'instancesInstanceKeySendImagePostRequest' when calling MessageSendingApi->InstancesInstanceKeySendImagePost");

            var localVarPath = "/instances/{instance_key}/send/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (caption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caption", caption)); // query parameter
            if (instancesInstanceKeySendImagePostRequest != null && instancesInstanceKeySendImagePostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instancesInstanceKeySendImagePostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instancesInstanceKeySendImagePostRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendImagePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a List message. Sends an interactive List message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeySendListPost (string instanceKey, StructsListMessagePayload data)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeySendListPostWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a List message. Sends an interactive List message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeySendListPostWithHttpInfo (string instanceKey, StructsListMessagePayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendListPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendListPost");

            var localVarPath = "/instances/{instance_key}/send/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendListPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a List message. Sends an interactive List message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendListPostAsync (string instanceKey, StructsListMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeySendListPostWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a List message. Sends an interactive List message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendListPostWithHttpInfoAsync (string instanceKey, StructsListMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendListPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendListPost");

            var localVarPath = "/instances/{instance_key}/send/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendListPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a location message. Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeySendLocationPost (string instanceKey, StructsLocationMessagePayload data)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeySendLocationPostWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a location message. Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeySendLocationPostWithHttpInfo (string instanceKey, StructsLocationMessagePayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendLocationPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendLocationPost");

            var localVarPath = "/instances/{instance_key}/send/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendLocationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a location message. Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendLocationPostAsync (string instanceKey, StructsLocationMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeySendLocationPostWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a location message. Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendLocationPostWithHttpInfoAsync (string instanceKey, StructsLocationMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendLocationPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendLocationPost");

            var localVarPath = "/instances/{instance_key}/send/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendLocationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a media message. Sends a media message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeySendMediaPost (string instanceKey, StructsSendMediaPayload data)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeySendMediaPostWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a media message. Sends a media message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeySendMediaPostWithHttpInfo (string instanceKey, StructsSendMediaPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendMediaPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendMediaPost");

            var localVarPath = "/instances/{instance_key}/send/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendMediaPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a media message. Sends a media message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendMediaPostAsync (string instanceKey, StructsSendMediaPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeySendMediaPostWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a media message. Sends a media message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendMediaPostWithHttpInfoAsync (string instanceKey, StructsSendMediaPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendMediaPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendMediaPost");

            var localVarPath = "/instances/{instance_key}/send/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendMediaPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a Poll message with media. Sends an interactive poll message with a media header to the given user. The poll message is a new feature that is currently in beta.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeySendPollPost (string instanceKey, StructsPollMessagePayload data)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeySendPollPostWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a Poll message with media. Sends an interactive poll message with a media header to the given user. The poll message is a new feature that is currently in beta.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeySendPollPostWithHttpInfo (string instanceKey, StructsPollMessagePayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendPollPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendPollPost");

            var localVarPath = "/instances/{instance_key}/send/poll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendPollPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a Poll message with media. Sends an interactive poll message with a media header to the given user. The poll message is a new feature that is currently in beta.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendPollPostAsync (string instanceKey, StructsPollMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeySendPollPostWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a Poll message with media. Sends an interactive poll message with a media header to the given user. The poll message is a new feature that is currently in beta.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendPollPostWithHttpInfoAsync (string instanceKey, StructsPollMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendPollPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendPollPost");

            var localVarPath = "/instances/{instance_key}/send/poll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendPollPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a template message with media. Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeySendTemplateMediaPost (string instanceKey, StructsTemplateButtonWithMediaPayload data)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeySendTemplateMediaPostWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a template message with media. Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeySendTemplateMediaPostWithHttpInfo (string instanceKey, StructsTemplateButtonWithMediaPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendTemplateMediaPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendTemplateMediaPost");

            var localVarPath = "/instances/{instance_key}/send/template-media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendTemplateMediaPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a template message with media. Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendTemplateMediaPostAsync (string instanceKey, StructsTemplateButtonWithMediaPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeySendTemplateMediaPostWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a template message with media. Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendTemplateMediaPostWithHttpInfoAsync (string instanceKey, StructsTemplateButtonWithMediaPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendTemplateMediaPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendTemplateMediaPost");

            var localVarPath = "/instances/{instance_key}/send/template-media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendTemplateMediaPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a template message. Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeySendTemplatePost (string instanceKey, StructsTemplateButtonPayload data)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeySendTemplatePostWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a template message. Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeySendTemplatePostWithHttpInfo (string instanceKey, StructsTemplateButtonPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendTemplatePost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendTemplatePost");

            var localVarPath = "/instances/{instance_key}/send/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendTemplatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a template message. Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendTemplatePostAsync (string instanceKey, StructsTemplateButtonPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeySendTemplatePostWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a template message. Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendTemplatePostWithHttpInfoAsync (string instanceKey, StructsTemplateButtonPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendTemplatePost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendTemplatePost");

            var localVarPath = "/instances/{instance_key}/send/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendTemplatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a text message. Sends a text message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeySendTextPost (string instanceKey, StructsTextMessage data)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeySendTextPostWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a text message. Sends a text message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeySendTextPostWithHttpInfo (string instanceKey, StructsTextMessage data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendTextPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendTextPost");

            var localVarPath = "/instances/{instance_key}/send/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendTextPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send a text message. Sends a text message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendTextPostAsync (string instanceKey, StructsTextMessage data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeySendTextPostWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a text message. Sends a text message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendTextPostWithHttpInfoAsync (string instanceKey, StructsTextMessage data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendTextPost");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->InstancesInstanceKeySendTextPost");

            var localVarPath = "/instances/{instance_key}/send/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendTextPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Upload media. Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="instancesInstanceKeySendUploadPostRequest"></param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeySendUploadPost (string instanceKey, string type, InstancesInstanceKeySendUploadPostRequest instancesInstanceKeySendUploadPostRequest)
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeySendUploadPostWithHttpInfo(instanceKey, type, instancesInstanceKeySendUploadPostRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload media. Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="instancesInstanceKeySendUploadPostRequest"></param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeySendUploadPostWithHttpInfo (string instanceKey, string type, InstancesInstanceKeySendUploadPostRequest instancesInstanceKeySendUploadPostRequest)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendUploadPost");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling MessageSendingApi->InstancesInstanceKeySendUploadPost");
            // verify the required parameter 'instancesInstanceKeySendUploadPostRequest' is set
            if (instancesInstanceKeySendUploadPostRequest == null)
                throw new ApiException(400, "Missing required parameter 'instancesInstanceKeySendUploadPostRequest' when calling MessageSendingApi->InstancesInstanceKeySendUploadPost");

            var localVarPath = "/instances/{instance_key}/send/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (instancesInstanceKeySendUploadPostRequest != null && instancesInstanceKeySendUploadPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instancesInstanceKeySendUploadPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instancesInstanceKeySendUploadPostRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendUploadPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Upload media. Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="instancesInstanceKeySendUploadPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendUploadPostAsync (string instanceKey, string type, InstancesInstanceKeySendUploadPostRequest instancesInstanceKeySendUploadPostRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeySendUploadPostWithHttpInfoAsync(instanceKey, type, instancesInstanceKeySendUploadPostRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload media. Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="instancesInstanceKeySendUploadPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendUploadPostWithHttpInfoAsync (string instanceKey, string type, InstancesInstanceKeySendUploadPostRequest instancesInstanceKeySendUploadPostRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendUploadPost");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling MessageSendingApi->InstancesInstanceKeySendUploadPost");
            // verify the required parameter 'instancesInstanceKeySendUploadPostRequest' is set
            if (instancesInstanceKeySendUploadPostRequest == null)
                throw new ApiException(400, "Missing required parameter 'instancesInstanceKeySendUploadPostRequest' when calling MessageSendingApi->InstancesInstanceKeySendUploadPost");

            var localVarPath = "/instances/{instance_key}/send/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (instancesInstanceKeySendUploadPostRequest != null && instancesInstanceKeySendUploadPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instancesInstanceKeySendUploadPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instancesInstanceKeySendUploadPostRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendUploadPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send raw video. Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendVideoPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>MainAPIResponse</returns>
        public MainAPIResponse InstancesInstanceKeySendVideoPost (string instanceKey, string to, InstancesInstanceKeySendVideoPostRequest instancesInstanceKeySendVideoPostRequest, string caption = default(string))
        {
             ApiResponse<MainAPIResponse> localVarResponse = InstancesInstanceKeySendVideoPostWithHttpInfo(instanceKey, to, instancesInstanceKeySendVideoPostRequest, caption);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send raw video. Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendVideoPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>ApiResponse of MainAPIResponse</returns>
        public ApiResponse<MainAPIResponse> InstancesInstanceKeySendVideoPostWithHttpInfo (string instanceKey, string to, InstancesInstanceKeySendVideoPostRequest instancesInstanceKeySendVideoPostRequest, string caption = default(string))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendVideoPost");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessageSendingApi->InstancesInstanceKeySendVideoPost");
            // verify the required parameter 'instancesInstanceKeySendVideoPostRequest' is set
            if (instancesInstanceKeySendVideoPostRequest == null)
                throw new ApiException(400, "Missing required parameter 'instancesInstanceKeySendVideoPostRequest' when calling MessageSendingApi->InstancesInstanceKeySendVideoPost");

            var localVarPath = "/instances/{instance_key}/send/video";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (caption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caption", caption)); // query parameter
            if (instancesInstanceKeySendVideoPostRequest != null && instancesInstanceKeySendVideoPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instancesInstanceKeySendVideoPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instancesInstanceKeySendVideoPostRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendVideoPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

        /// <summary>
        /// Send raw video. Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendVideoPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MainAPIResponse</returns>
        public async System.Threading.Tasks.Task<MainAPIResponse> InstancesInstanceKeySendVideoPostAsync (string instanceKey, string to, InstancesInstanceKeySendVideoPostRequest instancesInstanceKeySendVideoPostRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MainAPIResponse> localVarResponse = await InstancesInstanceKeySendVideoPostWithHttpInfoAsync(instanceKey, to, instancesInstanceKeySendVideoPostRequest, caption, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send raw video. Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="instancesInstanceKeySendVideoPostRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MainAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainAPIResponse>> InstancesInstanceKeySendVideoPostWithHttpInfoAsync (string instanceKey, string to, InstancesInstanceKeySendVideoPostRequest instancesInstanceKeySendVideoPostRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->InstancesInstanceKeySendVideoPost");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessageSendingApi->InstancesInstanceKeySendVideoPost");
            // verify the required parameter 'instancesInstanceKeySendVideoPostRequest' is set
            if (instancesInstanceKeySendVideoPostRequest == null)
                throw new ApiException(400, "Missing required parameter 'instancesInstanceKeySendVideoPostRequest' when calling MessageSendingApi->InstancesInstanceKeySendVideoPost");

            var localVarPath = "/instances/{instance_key}/send/video";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (caption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caption", caption)); // query parameter
            if (instancesInstanceKeySendVideoPostRequest != null && instancesInstanceKeySendVideoPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(instancesInstanceKeySendVideoPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instancesInstanceKeySendVideoPostRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstancesInstanceKeySendVideoPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MainAPIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainAPIResponse)));
        }

    }
}
