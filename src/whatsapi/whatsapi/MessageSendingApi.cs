/*
 * WhatsAPI Go
 *
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using WhatsAPI.Client;
using WhatsAPI.models;

namespace WhatsAPI.whatsapi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessageSendingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Send raw audio.
        /// </summary>
        /// <remarks>
        /// Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendAudioRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>APIResponse</returns>
        APIResponse SendAudio (string instanceKey, string to, SendAudioRequest sendAudioRequest, string caption = default(string));

        /// <summary>
        /// Send raw audio.
        /// </summary>
        /// <remarks>
        /// Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendAudioRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SendAudioWithHttpInfo (string instanceKey, string to, SendAudioRequest sendAudioRequest, string caption = default(string));
        /// <summary>
        /// Send a button message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive button message to the given user. Make sure that all the button ids are unique
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        APIResponse SendButtonMessage (string instanceKey, ButtonMessagePayload data);

        /// <summary>
        /// Send a button message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive button message to the given user. Make sure that all the button ids are unique
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SendButtonMessageWithHttpInfo (string instanceKey, ButtonMessagePayload data);
        /// <summary>
        /// Send a button message with a media header.
        /// </summary>
        /// <remarks>
        /// Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        APIResponse SendButtonWithMedia (string instanceKey, ButtonMessageWithMediaPayload data);

        /// <summary>
        /// Send a button message with a media header.
        /// </summary>
        /// <remarks>
        /// Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SendButtonWithMediaWithHttpInfo (string instanceKey, ButtonMessageWithMediaPayload data);
        /// <summary>
        /// Send a contact message.
        /// </summary>
        /// <remarks>
        /// Sends a contact (vcard) message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        APIResponse SendContact (string instanceKey, ContactMessagePayload data);

        /// <summary>
        /// Send a contact message.
        /// </summary>
        /// <remarks>
        /// Sends a contact (vcard) message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SendContactWithHttpInfo (string instanceKey, ContactMessagePayload data);
        /// <summary>
        /// Send raw document.
        /// </summary>
        /// <remarks>
        /// Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendDocumentRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>APIResponse</returns>
        APIResponse SendDocument (string instanceKey, string to, SendDocumentRequest sendDocumentRequest, string caption = default(string));

        /// <summary>
        /// Send raw document.
        /// </summary>
        /// <remarks>
        /// Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendDocumentRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SendDocumentWithHttpInfo (string instanceKey, string to, SendDocumentRequest sendDocumentRequest, string caption = default(string));
        /// <summary>
        /// Send a group invite message
        /// </summary>
        /// <remarks>
        /// Sends a group invite message to the specified number. Don't include \"https://chat.whatsapp.com/\" in the invite code.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        APIResponse SendGroupInvite (string instanceKey, GroupInviteMessagePayload data);

        /// <summary>
        /// Send a group invite message
        /// </summary>
        /// <remarks>
        /// Sends a group invite message to the specified number. Don't include \"https://chat.whatsapp.com/\" in the invite code.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SendGroupInviteWithHttpInfo (string instanceKey, GroupInviteMessagePayload data);
        /// <summary>
        /// Send raw image.
        /// </summary>
        /// <remarks>
        /// Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="updateProfilePicRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>APIResponse</returns>
        APIResponse SendImage (string instanceKey, string to, UpdateProfilePicRequest updateProfilePicRequest, string caption = default(string));

        /// <summary>
        /// Send raw image.
        /// </summary>
        /// <remarks>
        /// Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="updateProfilePicRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SendImageWithHttpInfo (string instanceKey, string to, UpdateProfilePicRequest updateProfilePicRequest, string caption = default(string));
        /// <summary>
        /// Send a List message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive List message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        APIResponse SendListMessage (string instanceKey, ListMessagePayload data);

        /// <summary>
        /// Send a List message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive List message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SendListMessageWithHttpInfo (string instanceKey, ListMessagePayload data);
        /// <summary>
        /// Send a location message.
        /// </summary>
        /// <remarks>
        /// Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        APIResponse SendLocation (string instanceKey, LocationMessagePayload data);

        /// <summary>
        /// Send a location message.
        /// </summary>
        /// <remarks>
        /// Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SendLocationWithHttpInfo (string instanceKey, LocationMessagePayload data);
        /// <summary>
        /// Send a media message.
        /// </summary>
        /// <remarks>
        /// Sends a media message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        APIResponse SendMediaMessage (string instanceKey, SendMediaPayload data);

        /// <summary>
        /// Send a media message.
        /// </summary>
        /// <remarks>
        /// Sends a media message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SendMediaMessageWithHttpInfo (string instanceKey, SendMediaPayload data);
        /// <summary>
        /// Send a Poll message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        APIResponse SendPollMessage (string instanceKey, PollMessagePayload data);

        /// <summary>
        /// Send a Poll message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SendPollMessageWithHttpInfo (string instanceKey, PollMessagePayload data);
        /// <summary>
        /// Send a template message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        APIResponse SendTemplate (string instanceKey, TemplateButtonPayload data);

        /// <summary>
        /// Send a template message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SendTemplateWithHttpInfo (string instanceKey, TemplateButtonPayload data);
        /// <summary>
        /// Send a template message with media.
        /// </summary>
        /// <remarks>
        /// Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        APIResponse SendTemplateWithMedia (string instanceKey, TemplateButtonWithMediaPayload data);

        /// <summary>
        /// Send a template message with media.
        /// </summary>
        /// <remarks>
        /// Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SendTemplateWithMediaWithHttpInfo (string instanceKey, TemplateButtonWithMediaPayload data);
        /// <summary>
        /// Send a text message.
        /// </summary>
        /// <remarks>
        /// Sends a text message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        APIResponse SendTextMessage (string instanceKey, TextMessage data);

        /// <summary>
        /// Send a text message.
        /// </summary>
        /// <remarks>
        /// Sends a text message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SendTextMessageWithHttpInfo (string instanceKey, TextMessage data);
        /// <summary>
        /// Send raw video.
        /// </summary>
        /// <remarks>
        /// Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendVideoRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>APIResponse</returns>
        APIResponse SendVideo (string instanceKey, string to, SendVideoRequest sendVideoRequest, string caption = default(string));

        /// <summary>
        /// Send raw video.
        /// </summary>
        /// <remarks>
        /// Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendVideoRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> SendVideoWithHttpInfo (string instanceKey, string to, SendVideoRequest sendVideoRequest, string caption = default(string));
        /// <summary>
        /// Upload media.
        /// </summary>
        /// <remarks>
        /// Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="uploadMediaRequest"></param>
        /// <returns>APIResponse</returns>
        APIResponse UploadMedia (string instanceKey, string type, UploadMediaRequest uploadMediaRequest);

        /// <summary>
        /// Upload media.
        /// </summary>
        /// <remarks>
        /// Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="uploadMediaRequest"></param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> UploadMediaWithHttpInfo (string instanceKey, string type, UploadMediaRequest uploadMediaRequest);
        /// <summary>
        /// Upload media from url.
        /// </summary>
        /// <remarks>
        /// Uploads media from a url to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="data">Media data</param>
        /// <returns>APIResponse</returns>
        APIResponse UploadMediaFromUrl (string instanceKey, string type, UrlMediaUploadPayload data);

        /// <summary>
        /// Upload media from url.
        /// </summary>
        /// <remarks>
        /// Uploads media from a url to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="data">Media data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> UploadMediaFromUrlWithHttpInfo (string instanceKey, string type, UrlMediaUploadPayload data);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Send raw audio.
        /// </summary>
        /// <remarks>
        /// Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendAudioRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SendAudioAsync (string instanceKey, string to, SendAudioRequest sendAudioRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send raw audio.
        /// </summary>
        /// <remarks>
        /// Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendAudioRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendAudioWithHttpInfoAsync (string instanceKey, string to, SendAudioRequest sendAudioRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a button message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive button message to the given user. Make sure that all the button ids are unique
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SendButtonMessageAsync (string instanceKey, ButtonMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a button message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive button message to the given user. Make sure that all the button ids are unique
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendButtonMessageWithHttpInfoAsync (string instanceKey, ButtonMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a button message with a media header.
        /// </summary>
        /// <remarks>
        /// Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SendButtonWithMediaAsync (string instanceKey, ButtonMessageWithMediaPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a button message with a media header.
        /// </summary>
        /// <remarks>
        /// Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendButtonWithMediaWithHttpInfoAsync (string instanceKey, ButtonMessageWithMediaPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a contact message.
        /// </summary>
        /// <remarks>
        /// Sends a contact (vcard) message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SendContactAsync (string instanceKey, ContactMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a contact message.
        /// </summary>
        /// <remarks>
        /// Sends a contact (vcard) message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendContactWithHttpInfoAsync (string instanceKey, ContactMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send raw document.
        /// </summary>
        /// <remarks>
        /// Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendDocumentRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SendDocumentAsync (string instanceKey, string to, SendDocumentRequest sendDocumentRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send raw document.
        /// </summary>
        /// <remarks>
        /// Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendDocumentRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendDocumentWithHttpInfoAsync (string instanceKey, string to, SendDocumentRequest sendDocumentRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a group invite message
        /// </summary>
        /// <remarks>
        /// Sends a group invite message to the specified number. Don't include \"https://chat.whatsapp.com/\" in the invite code.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SendGroupInviteAsync (string instanceKey, GroupInviteMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a group invite message
        /// </summary>
        /// <remarks>
        /// Sends a group invite message to the specified number. Don't include \"https://chat.whatsapp.com/\" in the invite code.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendGroupInviteWithHttpInfoAsync (string instanceKey, GroupInviteMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send raw image.
        /// </summary>
        /// <remarks>
        /// Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="updateProfilePicRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SendImageAsync (string instanceKey, string to, UpdateProfilePicRequest updateProfilePicRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send raw image.
        /// </summary>
        /// <remarks>
        /// Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="updateProfilePicRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendImageWithHttpInfoAsync (string instanceKey, string to, UpdateProfilePicRequest updateProfilePicRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a List message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive List message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SendListMessageAsync (string instanceKey, ListMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a List message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive List message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendListMessageWithHttpInfoAsync (string instanceKey, ListMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a location message.
        /// </summary>
        /// <remarks>
        /// Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SendLocationAsync (string instanceKey, LocationMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a location message.
        /// </summary>
        /// <remarks>
        /// Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendLocationWithHttpInfoAsync (string instanceKey, LocationMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a media message.
        /// </summary>
        /// <remarks>
        /// Sends a media message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SendMediaMessageAsync (string instanceKey, SendMediaPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a media message.
        /// </summary>
        /// <remarks>
        /// Sends a media message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendMediaMessageWithHttpInfoAsync (string instanceKey, SendMediaPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a Poll message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SendPollMessageAsync (string instanceKey, PollMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a Poll message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendPollMessageWithHttpInfoAsync (string instanceKey, PollMessagePayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a template message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SendTemplateAsync (string instanceKey, TemplateButtonPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a template message.
        /// </summary>
        /// <remarks>
        /// Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendTemplateWithHttpInfoAsync (string instanceKey, TemplateButtonPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a template message with media.
        /// </summary>
        /// <remarks>
        /// Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SendTemplateWithMediaAsync (string instanceKey, TemplateButtonWithMediaPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a template message with media.
        /// </summary>
        /// <remarks>
        /// Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendTemplateWithMediaWithHttpInfoAsync (string instanceKey, TemplateButtonWithMediaPayload data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a text message.
        /// </summary>
        /// <remarks>
        /// Sends a text message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SendTextMessageAsync (string instanceKey, TextMessage data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a text message.
        /// </summary>
        /// <remarks>
        /// Sends a text message to the given user.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendTextMessageWithHttpInfoAsync (string instanceKey, TextMessage data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send raw video.
        /// </summary>
        /// <remarks>
        /// Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendVideoRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> SendVideoAsync (string instanceKey, string to, SendVideoRequest sendVideoRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send raw video.
        /// </summary>
        /// <remarks>
        /// Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendVideoRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendVideoWithHttpInfoAsync (string instanceKey, string to, SendVideoRequest sendVideoRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Upload media.
        /// </summary>
        /// <remarks>
        /// Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="uploadMediaRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> UploadMediaAsync (string instanceKey, string type, UploadMediaRequest uploadMediaRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upload media.
        /// </summary>
        /// <remarks>
        /// Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="uploadMediaRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> UploadMediaWithHttpInfoAsync (string instanceKey, string type, UploadMediaRequest uploadMediaRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Upload media from url.
        /// </summary>
        /// <remarks>
        /// Uploads media from a url to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="data">Media data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> UploadMediaFromUrlAsync (string instanceKey, string type, UrlMediaUploadPayload data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upload media from url.
        /// </summary>
        /// <remarks>
        /// Uploads media from a url to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </remarks>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="data">Media data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> UploadMediaFromUrlWithHttpInfoAsync (string instanceKey, string type, UrlMediaUploadPayload data, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessageSendingApi : IMessageSendingApi
    {
        private WhatsAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageSendingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessageSendingApi(String basePath)
        {
            this.Configuration = new WhatsAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = WhatsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageSendingApi"/> class
        /// </summary>
        /// <returns></returns>
        public MessageSendingApi()
        {
            this.Configuration = WhatsAPI.Client.Configuration.Default;

            ExceptionFactory = WhatsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageSendingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessageSendingApi(WhatsAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = WhatsAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = WhatsAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public WhatsAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WhatsAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Send raw audio. Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendAudioRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>APIResponse</returns>
        public APIResponse SendAudio (string instanceKey, string to, SendAudioRequest sendAudioRequest, string caption = default(string))
        {
             ApiResponse<APIResponse> localVarResponse = SendAudioWithHttpInfo(instanceKey, to, sendAudioRequest, caption);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send raw audio. Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendAudioRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SendAudioWithHttpInfo (string instanceKey, string to, SendAudioRequest sendAudioRequest, string caption = default(string))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendAudio");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessageSendingApi->SendAudio");
            // verify the required parameter 'sendAudioRequest' is set
            if (sendAudioRequest == null)
                throw new ApiException(400, "Missing required parameter 'sendAudioRequest' when calling MessageSendingApi->SendAudio");

            var localVarPath = "/instances/{instance_key}/send/audio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (caption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caption", caption)); // query parameter
            if (sendAudioRequest != null && sendAudioRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendAudioRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendAudioRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendAudio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send raw audio. Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendAudioRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SendAudioAsync (string instanceKey, string to, SendAudioRequest sendAudioRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SendAudioWithHttpInfoAsync(instanceKey, to, sendAudioRequest, caption, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send raw audio. Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendAudioRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendAudioWithHttpInfoAsync (string instanceKey, string to, SendAudioRequest sendAudioRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendAudio");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessageSendingApi->SendAudio");
            // verify the required parameter 'sendAudioRequest' is set
            if (sendAudioRequest == null)
                throw new ApiException(400, "Missing required parameter 'sendAudioRequest' when calling MessageSendingApi->SendAudio");

            var localVarPath = "/instances/{instance_key}/send/audio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (caption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caption", caption)); // query parameter
            if (sendAudioRequest != null && sendAudioRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendAudioRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendAudioRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendAudio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a button message. Sends an interactive button message to the given user. Make sure that all the button ids are unique
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        public APIResponse SendButtonMessage (string instanceKey, ButtonMessagePayload data)
        {
             ApiResponse<APIResponse> localVarResponse = SendButtonMessageWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a button message. Sends an interactive button message to the given user. Make sure that all the button ids are unique
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SendButtonMessageWithHttpInfo (string instanceKey, ButtonMessagePayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendButtonMessage");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendButtonMessage");

            var localVarPath = "/instances/{instance_key}/send/buttons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendButtonMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a button message. Sends an interactive button message to the given user. Make sure that all the button ids are unique
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SendButtonMessageAsync (string instanceKey, ButtonMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SendButtonMessageWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a button message. Sends an interactive button message to the given user. Make sure that all the button ids are unique
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendButtonMessageWithHttpInfoAsync (string instanceKey, ButtonMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendButtonMessage");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendButtonMessage");

            var localVarPath = "/instances/{instance_key}/send/buttons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendButtonMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a button message with a media header. Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        public APIResponse SendButtonWithMedia (string instanceKey, ButtonMessageWithMediaPayload data)
        {
             ApiResponse<APIResponse> localVarResponse = SendButtonWithMediaWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a button message with a media header. Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SendButtonWithMediaWithHttpInfo (string instanceKey, ButtonMessageWithMediaPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendButtonWithMedia");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendButtonWithMedia");

            var localVarPath = "/instances/{instance_key}/send/button-media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendButtonWithMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a button message with a media header. Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SendButtonWithMediaAsync (string instanceKey, ButtonMessageWithMediaPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SendButtonWithMediaWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a button message with a media header. Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendButtonWithMediaWithHttpInfoAsync (string instanceKey, ButtonMessageWithMediaPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendButtonWithMedia");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendButtonWithMedia");

            var localVarPath = "/instances/{instance_key}/send/button-media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendButtonWithMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a contact message. Sends a contact (vcard) message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        public APIResponse SendContact (string instanceKey, ContactMessagePayload data)
        {
             ApiResponse<APIResponse> localVarResponse = SendContactWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a contact message. Sends a contact (vcard) message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SendContactWithHttpInfo (string instanceKey, ContactMessagePayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendContact");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendContact");

            var localVarPath = "/instances/{instance_key}/send/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a contact message. Sends a contact (vcard) message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SendContactAsync (string instanceKey, ContactMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SendContactWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a contact message. Sends a contact (vcard) message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendContactWithHttpInfoAsync (string instanceKey, ContactMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendContact");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendContact");

            var localVarPath = "/instances/{instance_key}/send/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send raw document. Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendDocumentRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>APIResponse</returns>
        public APIResponse SendDocument (string instanceKey, string to, SendDocumentRequest sendDocumentRequest, string caption = default(string))
        {
             ApiResponse<APIResponse> localVarResponse = SendDocumentWithHttpInfo(instanceKey, to, sendDocumentRequest, caption);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send raw document. Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendDocumentRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SendDocumentWithHttpInfo (string instanceKey, string to, SendDocumentRequest sendDocumentRequest, string caption = default(string))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendDocument");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessageSendingApi->SendDocument");
            // verify the required parameter 'sendDocumentRequest' is set
            if (sendDocumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'sendDocumentRequest' when calling MessageSendingApi->SendDocument");

            var localVarPath = "/instances/{instance_key}/send/document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (caption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caption", caption)); // query parameter
            if (sendDocumentRequest != null && sendDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendDocumentRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send raw document. Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendDocumentRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SendDocumentAsync (string instanceKey, string to, SendDocumentRequest sendDocumentRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SendDocumentWithHttpInfoAsync(instanceKey, to, sendDocumentRequest, caption, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send raw document. Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendDocumentRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendDocumentWithHttpInfoAsync (string instanceKey, string to, SendDocumentRequest sendDocumentRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendDocument");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessageSendingApi->SendDocument");
            // verify the required parameter 'sendDocumentRequest' is set
            if (sendDocumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'sendDocumentRequest' when calling MessageSendingApi->SendDocument");

            var localVarPath = "/instances/{instance_key}/send/document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (caption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caption", caption)); // query parameter
            if (sendDocumentRequest != null && sendDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendDocumentRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a group invite message Sends a group invite message to the specified number. Don't include \"https://chat.whatsapp.com/\" in the invite code.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        public APIResponse SendGroupInvite (string instanceKey, GroupInviteMessagePayload data)
        {
             ApiResponse<APIResponse> localVarResponse = SendGroupInviteWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a group invite message Sends a group invite message to the specified number. Don't include \"https://chat.whatsapp.com/\" in the invite code.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SendGroupInviteWithHttpInfo (string instanceKey, GroupInviteMessagePayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendGroupInvite");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendGroupInvite");

            var localVarPath = "/instances/{instance_key}/send/group-invite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendGroupInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a group invite message Sends a group invite message to the specified number. Don't include \"https://chat.whatsapp.com/\" in the invite code.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SendGroupInviteAsync (string instanceKey, GroupInviteMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SendGroupInviteWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a group invite message Sends a group invite message to the specified number. Don't include \"https://chat.whatsapp.com/\" in the invite code.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendGroupInviteWithHttpInfoAsync (string instanceKey, GroupInviteMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendGroupInvite");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendGroupInvite");

            var localVarPath = "/instances/{instance_key}/send/group-invite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendGroupInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send raw image. Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="updateProfilePicRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>APIResponse</returns>
        public APIResponse SendImage (string instanceKey, string to, UpdateProfilePicRequest updateProfilePicRequest, string caption = default(string))
        {
             ApiResponse<APIResponse> localVarResponse = SendImageWithHttpInfo(instanceKey, to, updateProfilePicRequest, caption);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send raw image. Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="updateProfilePicRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SendImageWithHttpInfo (string instanceKey, string to, UpdateProfilePicRequest updateProfilePicRequest, string caption = default(string))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendImage");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessageSendingApi->SendImage");
            // verify the required parameter 'updateProfilePicRequest' is set
            if (updateProfilePicRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateProfilePicRequest' when calling MessageSendingApi->SendImage");

            var localVarPath = "/instances/{instance_key}/send/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (caption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caption", caption)); // query parameter
            if (updateProfilePicRequest != null && updateProfilePicRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateProfilePicRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateProfilePicRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send raw image. Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="updateProfilePicRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SendImageAsync (string instanceKey, string to, UpdateProfilePicRequest updateProfilePicRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SendImageWithHttpInfoAsync(instanceKey, to, updateProfilePicRequest, caption, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send raw image. Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="updateProfilePicRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendImageWithHttpInfoAsync (string instanceKey, string to, UpdateProfilePicRequest updateProfilePicRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendImage");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessageSendingApi->SendImage");
            // verify the required parameter 'updateProfilePicRequest' is set
            if (updateProfilePicRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateProfilePicRequest' when calling MessageSendingApi->SendImage");

            var localVarPath = "/instances/{instance_key}/send/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (caption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caption", caption)); // query parameter
            if (updateProfilePicRequest != null && updateProfilePicRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateProfilePicRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateProfilePicRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a List message. Sends an interactive List message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        public APIResponse SendListMessage (string instanceKey, ListMessagePayload data)
        {
             ApiResponse<APIResponse> localVarResponse = SendListMessageWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a List message. Sends an interactive List message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SendListMessageWithHttpInfo (string instanceKey, ListMessagePayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendListMessage");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendListMessage");

            var localVarPath = "/instances/{instance_key}/send/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendListMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a List message. Sends an interactive List message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SendListMessageAsync (string instanceKey, ListMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SendListMessageWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a List message. Sends an interactive List message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendListMessageWithHttpInfoAsync (string instanceKey, ListMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendListMessage");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendListMessage");

            var localVarPath = "/instances/{instance_key}/send/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendListMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a location message. Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        public APIResponse SendLocation (string instanceKey, LocationMessagePayload data)
        {
             ApiResponse<APIResponse> localVarResponse = SendLocationWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a location message. Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SendLocationWithHttpInfo (string instanceKey, LocationMessagePayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendLocation");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendLocation");

            var localVarPath = "/instances/{instance_key}/send/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a location message. Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SendLocationAsync (string instanceKey, LocationMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SendLocationWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a location message. Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendLocationWithHttpInfoAsync (string instanceKey, LocationMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendLocation");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendLocation");

            var localVarPath = "/instances/{instance_key}/send/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a media message. Sends a media message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        public APIResponse SendMediaMessage (string instanceKey, SendMediaPayload data)
        {
             ApiResponse<APIResponse> localVarResponse = SendMediaMessageWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a media message. Sends a media message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SendMediaMessageWithHttpInfo (string instanceKey, SendMediaPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendMediaMessage");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendMediaMessage");

            var localVarPath = "/instances/{instance_key}/send/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMediaMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a media message. Sends a media message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SendMediaMessageAsync (string instanceKey, SendMediaPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SendMediaMessageWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a media message. Sends a media message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendMediaMessageWithHttpInfoAsync (string instanceKey, SendMediaPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendMediaMessage");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendMediaMessage");

            var localVarPath = "/instances/{instance_key}/send/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMediaMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a Poll message. Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        public APIResponse SendPollMessage (string instanceKey, PollMessagePayload data)
        {
             ApiResponse<APIResponse> localVarResponse = SendPollMessageWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a Poll message. Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SendPollMessageWithHttpInfo (string instanceKey, PollMessagePayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendPollMessage");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendPollMessage");

            var localVarPath = "/instances/{instance_key}/send/poll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPollMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a Poll message. Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SendPollMessageAsync (string instanceKey, PollMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SendPollMessageWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a Poll message. Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendPollMessageWithHttpInfoAsync (string instanceKey, PollMessagePayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendPollMessage");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendPollMessage");

            var localVarPath = "/instances/{instance_key}/send/poll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPollMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a template message. Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        public APIResponse SendTemplate (string instanceKey, TemplateButtonPayload data)
        {
             ApiResponse<APIResponse> localVarResponse = SendTemplateWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a template message. Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SendTemplateWithHttpInfo (string instanceKey, TemplateButtonPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendTemplate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendTemplate");

            var localVarPath = "/instances/{instance_key}/send/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a template message. Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SendTemplateAsync (string instanceKey, TemplateButtonPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SendTemplateWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a template message. Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendTemplateWithHttpInfoAsync (string instanceKey, TemplateButtonPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendTemplate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendTemplate");

            var localVarPath = "/instances/{instance_key}/send/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a template message with media. Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        public APIResponse SendTemplateWithMedia (string instanceKey, TemplateButtonWithMediaPayload data)
        {
             ApiResponse<APIResponse> localVarResponse = SendTemplateWithMediaWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a template message with media. Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SendTemplateWithMediaWithHttpInfo (string instanceKey, TemplateButtonWithMediaPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendTemplateWithMedia");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendTemplateWithMedia");

            var localVarPath = "/instances/{instance_key}/send/template-media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendTemplateWithMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a template message with media. Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SendTemplateWithMediaAsync (string instanceKey, TemplateButtonWithMediaPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SendTemplateWithMediaWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a template message with media. Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendTemplateWithMediaWithHttpInfoAsync (string instanceKey, TemplateButtonWithMediaPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendTemplateWithMedia");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendTemplateWithMedia");

            var localVarPath = "/instances/{instance_key}/send/template-media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendTemplateWithMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a text message. Sends a text message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>APIResponse</returns>
        public APIResponse SendTextMessage (string instanceKey, TextMessage data)
        {
             ApiResponse<APIResponse> localVarResponse = SendTextMessageWithHttpInfo(instanceKey, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a text message. Sends a text message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SendTextMessageWithHttpInfo (string instanceKey, TextMessage data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendTextMessage");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendTextMessage");

            var localVarPath = "/instances/{instance_key}/send/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendTextMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send a text message. Sends a text message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SendTextMessageAsync (string instanceKey, TextMessage data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SendTextMessageWithHttpInfoAsync(instanceKey, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a text message. Sends a text message to the given user.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="data">Message data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendTextMessageWithHttpInfoAsync (string instanceKey, TextMessage data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendTextMessage");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->SendTextMessage");

            var localVarPath = "/instances/{instance_key}/send/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendTextMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send raw video. Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendVideoRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>APIResponse</returns>
        public APIResponse SendVideo (string instanceKey, string to, SendVideoRequest sendVideoRequest, string caption = default(string))
        {
             ApiResponse<APIResponse> localVarResponse = SendVideoWithHttpInfo(instanceKey, to, sendVideoRequest, caption);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send raw video. Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendVideoRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> SendVideoWithHttpInfo (string instanceKey, string to, SendVideoRequest sendVideoRequest, string caption = default(string))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendVideo");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessageSendingApi->SendVideo");
            // verify the required parameter 'sendVideoRequest' is set
            if (sendVideoRequest == null)
                throw new ApiException(400, "Missing required parameter 'sendVideoRequest' when calling MessageSendingApi->SendVideo");

            var localVarPath = "/instances/{instance_key}/send/video";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (caption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caption", caption)); // query parameter
            if (sendVideoRequest != null && sendVideoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendVideoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendVideoRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendVideo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Send raw video. Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendVideoRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> SendVideoAsync (string instanceKey, string to, SendVideoRequest sendVideoRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await SendVideoWithHttpInfoAsync(instanceKey, to, sendVideoRequest, caption, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send raw video. Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="to">The recipient&#39;s number</param>
        /// <param name="sendVideoRequest"></param>
        /// <param name="caption">Attached caption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> SendVideoWithHttpInfoAsync (string instanceKey, string to, SendVideoRequest sendVideoRequest, string caption = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->SendVideo");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessageSendingApi->SendVideo");
            // verify the required parameter 'sendVideoRequest' is set
            if (sendVideoRequest == null)
                throw new ApiException(400, "Missing required parameter 'sendVideoRequest' when calling MessageSendingApi->SendVideo");

            var localVarPath = "/instances/{instance_key}/send/video";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (caption != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "caption", caption)); // query parameter
            if (sendVideoRequest != null && sendVideoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendVideoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendVideoRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendVideo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Upload media. Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="uploadMediaRequest"></param>
        /// <returns>APIResponse</returns>
        public APIResponse UploadMedia (string instanceKey, string type, UploadMediaRequest uploadMediaRequest)
        {
             ApiResponse<APIResponse> localVarResponse = UploadMediaWithHttpInfo(instanceKey, type, uploadMediaRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload media. Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="uploadMediaRequest"></param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> UploadMediaWithHttpInfo (string instanceKey, string type, UploadMediaRequest uploadMediaRequest)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->UploadMedia");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling MessageSendingApi->UploadMedia");
            // verify the required parameter 'uploadMediaRequest' is set
            if (uploadMediaRequest == null)
                throw new ApiException(400, "Missing required parameter 'uploadMediaRequest' when calling MessageSendingApi->UploadMedia");

            var localVarPath = "/instances/{instance_key}/send/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (uploadMediaRequest != null && uploadMediaRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uploadMediaRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadMediaRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Upload media. Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="uploadMediaRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> UploadMediaAsync (string instanceKey, string type, UploadMediaRequest uploadMediaRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await UploadMediaWithHttpInfoAsync(instanceKey, type, uploadMediaRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload media. Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="uploadMediaRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> UploadMediaWithHttpInfoAsync (string instanceKey, string type, UploadMediaRequest uploadMediaRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->UploadMedia");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling MessageSendingApi->UploadMedia");
            // verify the required parameter 'uploadMediaRequest' is set
            if (uploadMediaRequest == null)
                throw new ApiException(400, "Missing required parameter 'uploadMediaRequest' when calling MessageSendingApi->UploadMedia");

            var localVarPath = "/instances/{instance_key}/send/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (uploadMediaRequest != null && uploadMediaRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uploadMediaRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadMediaRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Upload media from url. Uploads media from a url to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="data">Media data</param>
        /// <returns>APIResponse</returns>
        public APIResponse UploadMediaFromUrl (string instanceKey, string type, UrlMediaUploadPayload data)
        {
             ApiResponse<APIResponse> localVarResponse = UploadMediaFromUrlWithHttpInfo(instanceKey, type, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload media from url. Uploads media from a url to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="data">Media data</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse<APIResponse> UploadMediaFromUrlWithHttpInfo (string instanceKey, string type, UrlMediaUploadPayload data)
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->UploadMediaFromUrl");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling MessageSendingApi->UploadMediaFromUrl");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->UploadMediaFromUrl");

            var localVarPath = "/instances/{instance_key}/send/upload-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMediaFromUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Upload media from url. Uploads media from a url to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="data">Media data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> UploadMediaFromUrlAsync (string instanceKey, string type, UrlMediaUploadPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<APIResponse> localVarResponse = await UploadMediaFromUrlWithHttpInfoAsync(instanceKey, type, data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload media from url. Uploads media from a url to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
        /// </summary>
        /// <exception cref="WhatsAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceKey">Instance key</param>
        /// <param name="type">Media type</param>
        /// <param name="data">Media data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> UploadMediaFromUrlWithHttpInfoAsync (string instanceKey, string type, UrlMediaUploadPayload data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'instanceKey' is set
            if (instanceKey == null)
                throw new ApiException(400, "Missing required parameter 'instanceKey' when calling MessageSendingApi->UploadMediaFromUrl");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling MessageSendingApi->UploadMediaFromUrl");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling MessageSendingApi->UploadMediaFromUrl");

            var localVarPath = "/instances/{instance_key}/send/upload-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceKey != null) localVarPathParams.Add("instance_key", this.Configuration.ApiClient.ParameterToString(instanceKey)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMediaFromUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

    }
}
