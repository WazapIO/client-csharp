/*
 * WhatsAPI Go
 *
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WhatsAPI.Client.OpenAPIDateConverter;

namespace WhatsAPI.models
{
    /// <summary>
    /// StructsSendMediaPayload
    /// </summary>
    [DataContract]
    public partial class StructsSendMediaPayload :  IEquatable<StructsSendMediaPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructsSendMediaPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StructsSendMediaPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StructsSendMediaPayload" /> class.
        /// </summary>
        /// <param name="caption">caption.</param>
        /// <param name="filename">filename.</param>
        /// <param name="mediaData">mediaData (required).</param>
        /// <param name="mediaType">mediaType (required).</param>
        /// <param name="to">to (required).</param>
        public StructsSendMediaPayload(string caption = default(string), string filename = default(string), StructsFileUpload mediaData = default(StructsFileUpload), string mediaType = default(string), string to = default(string))
        {
            // to ensure "mediaData" is required (not null)
            if (mediaData == null)
            {
                throw new InvalidDataException("mediaData is a required property for StructsSendMediaPayload and cannot be null");
            }
            else
            {
                this.MediaData = mediaData;
            }

            // to ensure "mediaType" is required (not null)
            if (mediaType == null)
            {
                throw new InvalidDataException("mediaType is a required property for StructsSendMediaPayload and cannot be null");
            }
            else
            {
                this.MediaType = mediaType;
            }

            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for StructsSendMediaPayload and cannot be null");
            }
            else
            {
                this.To = to;
            }

            this.Caption = caption;
            this.Filename = filename;
        }

        /// <summary>
        /// Gets or Sets Caption
        /// </summary>
        [DataMember(Name="caption", EmitDefaultValue=false)]
        public string Caption { get; set; }

        /// <summary>
        /// Gets or Sets Filename
        /// </summary>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// Gets or Sets MediaData
        /// </summary>
        [DataMember(Name="media_data", EmitDefaultValue=true)]
        public StructsFileUpload MediaData { get; set; }

        /// <summary>
        /// Gets or Sets MediaType
        /// </summary>
        [DataMember(Name="media_type", EmitDefaultValue=true)]
        public string MediaType { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="to", EmitDefaultValue=true)]
        public string To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StructsSendMediaPayload {\n");
            sb.Append("  Caption: ").Append(Caption).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  MediaData: ").Append(MediaData).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructsSendMediaPayload);
        }

        /// <summary>
        /// Returns true if StructsSendMediaPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of StructsSendMediaPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructsSendMediaPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Caption == input.Caption ||
                    (this.Caption != null &&
                    this.Caption.Equals(input.Caption))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.MediaData == input.MediaData ||
                    (this.MediaData != null &&
                    this.MediaData.Equals(input.MediaData))
                ) && 
                (
                    this.MediaType == input.MediaType ||
                    (this.MediaType != null &&
                    this.MediaType.Equals(input.MediaType))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Caption != null)
                    hashCode = hashCode * 59 + this.Caption.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.MediaData != null)
                    hashCode = hashCode * 59 + this.MediaData.GetHashCode();
                if (this.MediaType != null)
                    hashCode = hashCode * 59 + this.MediaType.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
